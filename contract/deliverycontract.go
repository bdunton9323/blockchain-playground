// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// DeliveryContractMetaData contains all meta data concerning the DeliveryContract contract.
var DeliveryContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"NftBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"orderId\",\"type\":\"string\"}],\"name\":\"burnTokenByOrderId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"orderId\",\"type\":\"string\"}],\"name\":\"getTokenIdForOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedPurchaser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deliveryPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"orderId\",\"type\":\"string\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"payForGoods\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// DeliveryContractABI is the input ABI used to generate the binding from.
// Deprecated: Use DeliveryContractMetaData.ABI instead.
var DeliveryContractABI = DeliveryContractMetaData.ABI

// DeliveryContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DeliveryContractMetaData.Bin instead.
var DeliveryContractBin = DeliveryContractMetaData.Bin

// DeployDeliveryContract deploys a new Ethereum contract, binding an instance of DeliveryContract to it.
func DeployDeliveryContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DeliveryContract, error) {
	parsed, err := DeliveryContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DeliveryContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DeliveryContract{DeliveryContractCaller: DeliveryContractCaller{contract: contract}, DeliveryContractTransactor: DeliveryContractTransactor{contract: contract}, DeliveryContractFilterer: DeliveryContractFilterer{contract: contract}}, nil
}

// DeliveryContract is an auto generated Go binding around an Ethereum contract.
type DeliveryContract struct {
	DeliveryContractCaller     // Read-only binding to the contract
	DeliveryContractTransactor // Write-only binding to the contract
	DeliveryContractFilterer   // Log filterer for contract events
}

// DeliveryContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type DeliveryContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DeliveryContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DeliveryContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DeliveryContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DeliveryContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DeliveryContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DeliveryContractSession struct {
	Contract     *DeliveryContract // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DeliveryContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DeliveryContractCallerSession struct {
	Contract *DeliveryContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// DeliveryContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DeliveryContractTransactorSession struct {
	Contract     *DeliveryContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// DeliveryContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type DeliveryContractRaw struct {
	Contract *DeliveryContract // Generic contract binding to access the raw methods on
}

// DeliveryContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DeliveryContractCallerRaw struct {
	Contract *DeliveryContractCaller // Generic read-only contract binding to access the raw methods on
}

// DeliveryContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DeliveryContractTransactorRaw struct {
	Contract *DeliveryContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDeliveryContract creates a new instance of DeliveryContract, bound to a specific deployed contract.
func NewDeliveryContract(address common.Address, backend bind.ContractBackend) (*DeliveryContract, error) {
	contract, err := bindDeliveryContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DeliveryContract{DeliveryContractCaller: DeliveryContractCaller{contract: contract}, DeliveryContractTransactor: DeliveryContractTransactor{contract: contract}, DeliveryContractFilterer: DeliveryContractFilterer{contract: contract}}, nil
}

// NewDeliveryContractCaller creates a new read-only instance of DeliveryContract, bound to a specific deployed contract.
func NewDeliveryContractCaller(address common.Address, caller bind.ContractCaller) (*DeliveryContractCaller, error) {
	contract, err := bindDeliveryContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DeliveryContractCaller{contract: contract}, nil
}

// NewDeliveryContractTransactor creates a new write-only instance of DeliveryContract, bound to a specific deployed contract.
func NewDeliveryContractTransactor(address common.Address, transactor bind.ContractTransactor) (*DeliveryContractTransactor, error) {
	contract, err := bindDeliveryContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DeliveryContractTransactor{contract: contract}, nil
}

// NewDeliveryContractFilterer creates a new log filterer instance of DeliveryContract, bound to a specific deployed contract.
func NewDeliveryContractFilterer(address common.Address, filterer bind.ContractFilterer) (*DeliveryContractFilterer, error) {
	contract, err := bindDeliveryContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DeliveryContractFilterer{contract: contract}, nil
}

// bindDeliveryContract binds a generic wrapper to an already deployed contract.
func bindDeliveryContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DeliveryContractABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DeliveryContract *DeliveryContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DeliveryContract.Contract.DeliveryContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DeliveryContract *DeliveryContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DeliveryContract.Contract.DeliveryContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DeliveryContract *DeliveryContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DeliveryContract.Contract.DeliveryContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DeliveryContract *DeliveryContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DeliveryContract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DeliveryContract *DeliveryContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DeliveryContract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DeliveryContract *DeliveryContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DeliveryContract.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_DeliveryContract *DeliveryContractCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_DeliveryContract *DeliveryContractSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _DeliveryContract.Contract.BalanceOf(&_DeliveryContract.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_DeliveryContract *DeliveryContractCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _DeliveryContract.Contract.BalanceOf(&_DeliveryContract.CallOpts, owner)
}

// BaseURI is a free data retrieval call binding the contract method 0x6c0360eb.
//
// Solidity: function baseURI() view returns(string)
func (_DeliveryContract *DeliveryContractCaller) BaseURI(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "baseURI")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// BaseURI is a free data retrieval call binding the contract method 0x6c0360eb.
//
// Solidity: function baseURI() view returns(string)
func (_DeliveryContract *DeliveryContractSession) BaseURI() (string, error) {
	return _DeliveryContract.Contract.BaseURI(&_DeliveryContract.CallOpts)
}

// BaseURI is a free data retrieval call binding the contract method 0x6c0360eb.
//
// Solidity: function baseURI() view returns(string)
func (_DeliveryContract *DeliveryContractCallerSession) BaseURI() (string, error) {
	return _DeliveryContract.Contract.BaseURI(&_DeliveryContract.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_DeliveryContract *DeliveryContractCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_DeliveryContract *DeliveryContractSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _DeliveryContract.Contract.GetApproved(&_DeliveryContract.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_DeliveryContract *DeliveryContractCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _DeliveryContract.Contract.GetApproved(&_DeliveryContract.CallOpts, tokenId)
}

// GetTokenIdForOrder is a free data retrieval call binding the contract method 0xf7008124.
//
// Solidity: function getTokenIdForOrder(string orderId) view returns(uint256)
func (_DeliveryContract *DeliveryContractCaller) GetTokenIdForOrder(opts *bind.CallOpts, orderId string) (*big.Int, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "getTokenIdForOrder", orderId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTokenIdForOrder is a free data retrieval call binding the contract method 0xf7008124.
//
// Solidity: function getTokenIdForOrder(string orderId) view returns(uint256)
func (_DeliveryContract *DeliveryContractSession) GetTokenIdForOrder(orderId string) (*big.Int, error) {
	return _DeliveryContract.Contract.GetTokenIdForOrder(&_DeliveryContract.CallOpts, orderId)
}

// GetTokenIdForOrder is a free data retrieval call binding the contract method 0xf7008124.
//
// Solidity: function getTokenIdForOrder(string orderId) view returns(uint256)
func (_DeliveryContract *DeliveryContractCallerSession) GetTokenIdForOrder(orderId string) (*big.Int, error) {
	return _DeliveryContract.Contract.GetTokenIdForOrder(&_DeliveryContract.CallOpts, orderId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_DeliveryContract *DeliveryContractCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_DeliveryContract *DeliveryContractSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _DeliveryContract.Contract.IsApprovedForAll(&_DeliveryContract.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_DeliveryContract *DeliveryContractCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _DeliveryContract.Contract.IsApprovedForAll(&_DeliveryContract.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DeliveryContract *DeliveryContractCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DeliveryContract *DeliveryContractSession) Name() (string, error) {
	return _DeliveryContract.Contract.Name(&_DeliveryContract.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DeliveryContract *DeliveryContractCallerSession) Name() (string, error) {
	return _DeliveryContract.Contract.Name(&_DeliveryContract.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_DeliveryContract *DeliveryContractCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_DeliveryContract *DeliveryContractSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _DeliveryContract.Contract.OwnerOf(&_DeliveryContract.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_DeliveryContract *DeliveryContractCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _DeliveryContract.Contract.OwnerOf(&_DeliveryContract.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DeliveryContract *DeliveryContractCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DeliveryContract *DeliveryContractSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DeliveryContract.Contract.SupportsInterface(&_DeliveryContract.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DeliveryContract *DeliveryContractCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DeliveryContract.Contract.SupportsInterface(&_DeliveryContract.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DeliveryContract *DeliveryContractCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DeliveryContract *DeliveryContractSession) Symbol() (string, error) {
	return _DeliveryContract.Contract.Symbol(&_DeliveryContract.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DeliveryContract *DeliveryContractCallerSession) Symbol() (string, error) {
	return _DeliveryContract.Contract.Symbol(&_DeliveryContract.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_DeliveryContract *DeliveryContractCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_DeliveryContract *DeliveryContractSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _DeliveryContract.Contract.TokenByIndex(&_DeliveryContract.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_DeliveryContract *DeliveryContractCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _DeliveryContract.Contract.TokenByIndex(&_DeliveryContract.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_DeliveryContract *DeliveryContractCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_DeliveryContract *DeliveryContractSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _DeliveryContract.Contract.TokenOfOwnerByIndex(&_DeliveryContract.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_DeliveryContract *DeliveryContractCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _DeliveryContract.Contract.TokenOfOwnerByIndex(&_DeliveryContract.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_DeliveryContract *DeliveryContractCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_DeliveryContract *DeliveryContractSession) TokenURI(tokenId *big.Int) (string, error) {
	return _DeliveryContract.Contract.TokenURI(&_DeliveryContract.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_DeliveryContract *DeliveryContractCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _DeliveryContract.Contract.TokenURI(&_DeliveryContract.CallOpts, tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DeliveryContract *DeliveryContractCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DeliveryContract *DeliveryContractSession) TotalSupply() (*big.Int, error) {
	return _DeliveryContract.Contract.TotalSupply(&_DeliveryContract.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DeliveryContract *DeliveryContractCallerSession) TotalSupply() (*big.Int, error) {
	return _DeliveryContract.Contract.TotalSupply(&_DeliveryContract.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.Approve(&_DeliveryContract.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.Approve(&_DeliveryContract.TransactOpts, to, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractTransactor) Burn(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.contract.Transact(opts, "burn", tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.Burn(&_DeliveryContract.TransactOpts, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractTransactorSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.Burn(&_DeliveryContract.TransactOpts, tokenId)
}

// BurnTokenByOrderId is a paid mutator transaction binding the contract method 0x6556e748.
//
// Solidity: function burnTokenByOrderId(string orderId) returns()
func (_DeliveryContract *DeliveryContractTransactor) BurnTokenByOrderId(opts *bind.TransactOpts, orderId string) (*types.Transaction, error) {
	return _DeliveryContract.contract.Transact(opts, "burnTokenByOrderId", orderId)
}

// BurnTokenByOrderId is a paid mutator transaction binding the contract method 0x6556e748.
//
// Solidity: function burnTokenByOrderId(string orderId) returns()
func (_DeliveryContract *DeliveryContractSession) BurnTokenByOrderId(orderId string) (*types.Transaction, error) {
	return _DeliveryContract.Contract.BurnTokenByOrderId(&_DeliveryContract.TransactOpts, orderId)
}

// BurnTokenByOrderId is a paid mutator transaction binding the contract method 0x6556e748.
//
// Solidity: function burnTokenByOrderId(string orderId) returns()
func (_DeliveryContract *DeliveryContractTransactorSession) BurnTokenByOrderId(orderId string) (*types.Transaction, error) {
	return _DeliveryContract.Contract.BurnTokenByOrderId(&_DeliveryContract.TransactOpts, orderId)
}

// Buy is a paid mutator transaction binding the contract method 0xd96a094a.
//
// Solidity: function buy(uint256 tokenId) payable returns()
func (_DeliveryContract *DeliveryContractTransactor) Buy(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.contract.Transact(opts, "buy", tokenId)
}

// Buy is a paid mutator transaction binding the contract method 0xd96a094a.
//
// Solidity: function buy(uint256 tokenId) payable returns()
func (_DeliveryContract *DeliveryContractSession) Buy(tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.Buy(&_DeliveryContract.TransactOpts, tokenId)
}

// Buy is a paid mutator transaction binding the contract method 0xd96a094a.
//
// Solidity: function buy(uint256 tokenId) payable returns()
func (_DeliveryContract *DeliveryContractTransactorSession) Buy(tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.Buy(&_DeliveryContract.TransactOpts, tokenId)
}

// MintToken is a paid mutator transaction binding the contract method 0x87c6649c.
//
// Solidity: function mintToken(address allowedPurchaser, uint256 deliveryPrice, uint256 orderPrice, string orderId) payable returns()
func (_DeliveryContract *DeliveryContractTransactor) MintToken(opts *bind.TransactOpts, allowedPurchaser common.Address, deliveryPrice *big.Int, orderPrice *big.Int, orderId string) (*types.Transaction, error) {
	return _DeliveryContract.contract.Transact(opts, "mintToken", allowedPurchaser, deliveryPrice, orderPrice, orderId)
}

// MintToken is a paid mutator transaction binding the contract method 0x87c6649c.
//
// Solidity: function mintToken(address allowedPurchaser, uint256 deliveryPrice, uint256 orderPrice, string orderId) payable returns()
func (_DeliveryContract *DeliveryContractSession) MintToken(allowedPurchaser common.Address, deliveryPrice *big.Int, orderPrice *big.Int, orderId string) (*types.Transaction, error) {
	return _DeliveryContract.Contract.MintToken(&_DeliveryContract.TransactOpts, allowedPurchaser, deliveryPrice, orderPrice, orderId)
}

// MintToken is a paid mutator transaction binding the contract method 0x87c6649c.
//
// Solidity: function mintToken(address allowedPurchaser, uint256 deliveryPrice, uint256 orderPrice, string orderId) payable returns()
func (_DeliveryContract *DeliveryContractTransactorSession) MintToken(allowedPurchaser common.Address, deliveryPrice *big.Int, orderPrice *big.Int, orderId string) (*types.Transaction, error) {
	return _DeliveryContract.Contract.MintToken(&_DeliveryContract.TransactOpts, allowedPurchaser, deliveryPrice, orderPrice, orderId)
}

// PayForGoods is a paid mutator transaction binding the contract method 0xe26d15e4.
//
// Solidity: function payForGoods(uint256 tokenId) payable returns()
func (_DeliveryContract *DeliveryContractTransactor) PayForGoods(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.contract.Transact(opts, "payForGoods", tokenId)
}

// PayForGoods is a paid mutator transaction binding the contract method 0xe26d15e4.
//
// Solidity: function payForGoods(uint256 tokenId) payable returns()
func (_DeliveryContract *DeliveryContractSession) PayForGoods(tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.PayForGoods(&_DeliveryContract.TransactOpts, tokenId)
}

// PayForGoods is a paid mutator transaction binding the contract method 0xe26d15e4.
//
// Solidity: function payForGoods(uint256 tokenId) payable returns()
func (_DeliveryContract *DeliveryContractTransactorSession) PayForGoods(tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.PayForGoods(&_DeliveryContract.TransactOpts, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.SafeTransferFrom(&_DeliveryContract.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.SafeTransferFrom(&_DeliveryContract.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_DeliveryContract *DeliveryContractTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _DeliveryContract.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_DeliveryContract *DeliveryContractSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _DeliveryContract.Contract.SafeTransferFrom0(&_DeliveryContract.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_DeliveryContract *DeliveryContractTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _DeliveryContract.Contract.SafeTransferFrom0(&_DeliveryContract.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_DeliveryContract *DeliveryContractTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _DeliveryContract.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_DeliveryContract *DeliveryContractSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _DeliveryContract.Contract.SetApprovalForAll(&_DeliveryContract.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_DeliveryContract *DeliveryContractTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _DeliveryContract.Contract.SetApprovalForAll(&_DeliveryContract.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.TransferFrom(&_DeliveryContract.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.TransferFrom(&_DeliveryContract.TransactOpts, from, to, tokenId)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractTransactor) Withdraw(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.contract.Transact(opts, "withdraw", tokenId)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractSession) Withdraw(tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.Withdraw(&_DeliveryContract.TransactOpts, tokenId)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractTransactorSession) Withdraw(tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.Withdraw(&_DeliveryContract.TransactOpts, tokenId)
}

// DeliveryContractApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the DeliveryContract contract.
type DeliveryContractApprovalIterator struct {
	Event *DeliveryContractApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DeliveryContractApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DeliveryContractApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DeliveryContractApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DeliveryContractApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DeliveryContractApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DeliveryContractApproval represents a Approval event raised by the DeliveryContract contract.
type DeliveryContractApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_DeliveryContract *DeliveryContractFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*DeliveryContractApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _DeliveryContract.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &DeliveryContractApprovalIterator{contract: _DeliveryContract.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_DeliveryContract *DeliveryContractFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *DeliveryContractApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _DeliveryContract.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DeliveryContractApproval)
				if err := _DeliveryContract.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_DeliveryContract *DeliveryContractFilterer) ParseApproval(log types.Log) (*DeliveryContractApproval, error) {
	event := new(DeliveryContractApproval)
	if err := _DeliveryContract.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DeliveryContractApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the DeliveryContract contract.
type DeliveryContractApprovalForAllIterator struct {
	Event *DeliveryContractApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DeliveryContractApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DeliveryContractApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DeliveryContractApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DeliveryContractApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DeliveryContractApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DeliveryContractApprovalForAll represents a ApprovalForAll event raised by the DeliveryContract contract.
type DeliveryContractApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_DeliveryContract *DeliveryContractFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*DeliveryContractApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _DeliveryContract.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &DeliveryContractApprovalForAllIterator{contract: _DeliveryContract.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_DeliveryContract *DeliveryContractFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *DeliveryContractApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _DeliveryContract.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DeliveryContractApprovalForAll)
				if err := _DeliveryContract.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_DeliveryContract *DeliveryContractFilterer) ParseApprovalForAll(log types.Log) (*DeliveryContractApprovalForAll, error) {
	event := new(DeliveryContractApprovalForAll)
	if err := _DeliveryContract.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DeliveryContractNFTMintedIterator is returned from FilterNFTMinted and is used to iterate over the raw logs and unpacked data for NFTMinted events raised by the DeliveryContract contract.
type DeliveryContractNFTMintedIterator struct {
	Event *DeliveryContractNFTMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DeliveryContractNFTMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DeliveryContractNFTMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DeliveryContractNFTMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DeliveryContractNFTMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DeliveryContractNFTMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DeliveryContractNFTMinted represents a NFTMinted event raised by the DeliveryContract contract.
type DeliveryContractNFTMinted struct {
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNFTMinted is a free log retrieval operation binding the contract event 0xd9dc24857f317ed9abbbb42e920ede0104231eb1d3d70236a74887ffaf159868.
//
// Solidity: event NFTMinted(uint256 _tokenId)
func (_DeliveryContract *DeliveryContractFilterer) FilterNFTMinted(opts *bind.FilterOpts) (*DeliveryContractNFTMintedIterator, error) {

	logs, sub, err := _DeliveryContract.contract.FilterLogs(opts, "NFTMinted")
	if err != nil {
		return nil, err
	}
	return &DeliveryContractNFTMintedIterator{contract: _DeliveryContract.contract, event: "NFTMinted", logs: logs, sub: sub}, nil
}

// WatchNFTMinted is a free log subscription operation binding the contract event 0xd9dc24857f317ed9abbbb42e920ede0104231eb1d3d70236a74887ffaf159868.
//
// Solidity: event NFTMinted(uint256 _tokenId)
func (_DeliveryContract *DeliveryContractFilterer) WatchNFTMinted(opts *bind.WatchOpts, sink chan<- *DeliveryContractNFTMinted) (event.Subscription, error) {

	logs, sub, err := _DeliveryContract.contract.WatchLogs(opts, "NFTMinted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DeliveryContractNFTMinted)
				if err := _DeliveryContract.contract.UnpackLog(event, "NFTMinted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNFTMinted is a log parse operation binding the contract event 0xd9dc24857f317ed9abbbb42e920ede0104231eb1d3d70236a74887ffaf159868.
//
// Solidity: event NFTMinted(uint256 _tokenId)
func (_DeliveryContract *DeliveryContractFilterer) ParseNFTMinted(log types.Log) (*DeliveryContractNFTMinted, error) {
	event := new(DeliveryContractNFTMinted)
	if err := _DeliveryContract.contract.UnpackLog(event, "NFTMinted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DeliveryContractNftBoughtIterator is returned from FilterNftBought and is used to iterate over the raw logs and unpacked data for NftBought events raised by the DeliveryContract contract.
type DeliveryContractNftBoughtIterator struct {
	Event *DeliveryContractNftBought // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DeliveryContractNftBoughtIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DeliveryContractNftBought)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DeliveryContractNftBought)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DeliveryContractNftBoughtIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DeliveryContractNftBoughtIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DeliveryContractNftBought represents a NftBought event raised by the DeliveryContract contract.
type DeliveryContractNftBought struct {
	Seller common.Address
	Buyer  common.Address
	Price  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterNftBought is a free log retrieval operation binding the contract event 0x608f6ac9327c2bf4d3c77adf447d2c448ba7b0971e0aaa9aa03f7ac29d874a44.
//
// Solidity: event NftBought(address _seller, address _buyer, uint256 _price)
func (_DeliveryContract *DeliveryContractFilterer) FilterNftBought(opts *bind.FilterOpts) (*DeliveryContractNftBoughtIterator, error) {

	logs, sub, err := _DeliveryContract.contract.FilterLogs(opts, "NftBought")
	if err != nil {
		return nil, err
	}
	return &DeliveryContractNftBoughtIterator{contract: _DeliveryContract.contract, event: "NftBought", logs: logs, sub: sub}, nil
}

// WatchNftBought is a free log subscription operation binding the contract event 0x608f6ac9327c2bf4d3c77adf447d2c448ba7b0971e0aaa9aa03f7ac29d874a44.
//
// Solidity: event NftBought(address _seller, address _buyer, uint256 _price)
func (_DeliveryContract *DeliveryContractFilterer) WatchNftBought(opts *bind.WatchOpts, sink chan<- *DeliveryContractNftBought) (event.Subscription, error) {

	logs, sub, err := _DeliveryContract.contract.WatchLogs(opts, "NftBought")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DeliveryContractNftBought)
				if err := _DeliveryContract.contract.UnpackLog(event, "NftBought", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNftBought is a log parse operation binding the contract event 0x608f6ac9327c2bf4d3c77adf447d2c448ba7b0971e0aaa9aa03f7ac29d874a44.
//
// Solidity: event NftBought(address _seller, address _buyer, uint256 _price)
func (_DeliveryContract *DeliveryContractFilterer) ParseNftBought(log types.Log) (*DeliveryContractNftBought, error) {
	event := new(DeliveryContractNftBought)
	if err := _DeliveryContract.contract.UnpackLog(event, "NftBought", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DeliveryContractTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the DeliveryContract contract.
type DeliveryContractTransferIterator struct {
	Event *DeliveryContractTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DeliveryContractTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DeliveryContractTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DeliveryContractTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DeliveryContractTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DeliveryContractTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DeliveryContractTransfer represents a Transfer event raised by the DeliveryContract contract.
type DeliveryContractTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_DeliveryContract *DeliveryContractFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*DeliveryContractTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _DeliveryContract.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &DeliveryContractTransferIterator{contract: _DeliveryContract.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_DeliveryContract *DeliveryContractFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *DeliveryContractTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _DeliveryContract.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DeliveryContractTransfer)
				if err := _DeliveryContract.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_DeliveryContract *DeliveryContractFilterer) ParseTransfer(log types.Log) (*DeliveryContractTransfer, error) {
	event := new(DeliveryContractTransfer)
	if err := _DeliveryContract.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
