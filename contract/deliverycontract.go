// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// DeliveryContractMetaData contains all meta data concerning the DeliveryContract contract.
var DeliveryContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"NftBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"orderId\",\"type\":\"string\"}],\"name\":\"burnTokenByOrderId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"orderId\",\"type\":\"string\"}],\"name\":\"getTokenIdForOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allowedPurchaser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deliveryPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"orderId\",\"type\":\"string\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"payForGoods\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040518060400160405280600d81526020017f44656c6976657279546f6b656e000000000000000000000000000000000000008152506040518060400160405280600381526020017f444c560000000000000000000000000000000000000000000000000000000000815250620000966301ffc9a760e01b6200015960201b60201c565b8160069080519060200190620000ae92919062000262565b508060079080519060200190620000c792919062000262565b50620000e06380ac58cd60e01b6200015960201b60201c565b620000f8635b5e139f60e01b6200015960201b60201c565b6200011063780e9d6360e01b6200015960201b60201c565b505033600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000311565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415620001f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4552433136353a20696e76616c696420696e746572666163652069640000000081525060200191505060405180910390fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002a557805160ff1916838001178555620002d6565b82800160010185558215620002d6579182015b82811115620002d5578251825591602001919060010190620002b8565b5b509050620002e59190620002e9565b5090565b6200030e91905b808211156200030a576000816000905550600101620002f0565b5090565b90565b613e8e80620003216000396000f3fe6080604052600436106101405760003560e01c80636556e748116100b6578063b88d4fde1161006f578063b88d4fde1461094b578063c87b56dd14610a5d578063d96a094a14610b11578063e26d15e414610b3f578063e985e9c514610b6d578063f700812414610bf657610140565b80636556e748146105b25780636c0360eb1461067a57806370a082311461070a57806387c6649c1461076f57806395d89b411461085e578063a22cb465146108ee57610140565b806323b872dd1161010857806323b872dd146103485780632f745c59146103c357806342842e0e1461043257806342966c68146104ad5780634f6ccce7146104e85780636352211e1461053757610140565b806301ffc9a71461014557806306fdde03146101b7578063081812fc14610247578063095ea7b3146102c257806318160ddd1461031d575b600080fd5b34801561015157600080fd5b5061019d6004803603602081101561016857600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610cd2565b604051808215151515815260200191505060405180910390f35b3480156101c357600080fd5b506101cc610d39565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561020c5780820151818401526020810190506101f1565b50505050905090810190601f1680156102395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561025357600080fd5b506102806004803603602081101561026a57600080fd5b8101908080359060200190929190505050610ddb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102ce57600080fd5b5061031b600480360360408110156102e557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e76565b005b34801561032957600080fd5b50610332610fba565b6040518082815260200191505060405180910390f35b34801561035457600080fd5b506103c16004803603606081101561036b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fcb565b005b3480156103cf57600080fd5b5061041c600480360360408110156103e657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611041565b6040518082815260200191505060405180910390f35b34801561043e57600080fd5b506104ab6004803603606081101561045557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061109c565b005b3480156104b957600080fd5b506104e6600480360360208110156104d057600080fd5b81019080803590602001909291905050506110bc565b005b3480156104f457600080fd5b506105216004803603602081101561050b57600080fd5b810190808035906020019092919050505061112e565b6040518082815260200191505060405180910390f35b34801561054357600080fd5b506105706004803603602081101561055a57600080fd5b8101908080359060200190929190505050611151565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105be57600080fd5b50610678600480360360208110156105d557600080fd5b81019080803590602001906401000000008111156105f257600080fd5b82018360208201111561060457600080fd5b8035906020019184600183028401116401000000008311171561062657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611188565b005b34801561068657600080fd5b5061068f6113e3565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106cf5780820151818401526020810190506106b4565b50505050905090810190601f1680156106fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561071657600080fd5b506107596004803603602081101561072d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611485565b6040518082815260200191505060405180910390f35b61085c6004803603608081101561078557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001906401000000008111156107d657600080fd5b8201836020820111156107e857600080fd5b8035906020019184600183028401116401000000008311171561080a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061155a565b005b34801561086a57600080fd5b50610873611732565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108b3578082015181840152602081019050610898565b50505050905090810190601f1680156108e05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156108fa57600080fd5b506109496004803603604081101561091157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506117d4565b005b34801561095757600080fd5b50610a5b6004803603608081101561096e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156109d557600080fd5b8201836020820111156109e757600080fd5b80359060200191846001830284011164010000000083111715610a0957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061198c565b005b348015610a6957600080fd5b50610a9660048036036020811015610a8057600080fd5b8101908080359060200190929190505050611a04565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610ad6578082015181840152602081019050610abb565b50505050905090810190601f168015610b035780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610b3d60048036036020811015610b2757600080fd5b8101908080359060200190929190505050611cd5565b005b610b6b60048036036020811015610b5557600080fd5b8101908080359060200190929190505050612072565b005b348015610b7957600080fd5b50610bdc60048036036040811015610b9057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506122c2565b604051808215151515815260200191505060405180910390f35b348015610c0257600080fd5b50610cbc60048036036020811015610c1957600080fd5b8101908080359060200190640100000000811115610c3657600080fd5b820183602082011115610c4857600080fd5b80359060200191846001830284011164010000000083111715610c6a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612356565b6040518082815260200191505060405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610dd15780601f10610da657610100808354040283529160200191610dd1565b820191906000526020600020905b815481529060010190602001808311610db457829003601f168201915b5050505050905090565b6000610de6826123c9565b610e3b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180613d05602c913960400191505060405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610e8182611151565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180613dd76021913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610f276123e6565b73ffffffffffffffffffffffffffffffffffffffff161480610f565750610f5581610f506123e6565b6122c2565b5b610fab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526038815260200180613c586038913960400191505060405180910390fd5b610fb583836123ee565b505050565b6000610fc660026124a7565b905090565b610fdc610fd66123e6565b826124bc565b611031576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180613df86031913960400191505060405180910390fd5b61103c8383836125b0565b505050565b600061109482600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206127f390919063ffffffff16565b905092915050565b6110b78383836040518060200160405280600081525061198c565b505050565b6110cd6110c76123e6565b826124bc565b611122576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526030815260200180613e296030913960400191505060405180910390fd5b61112b8161280d565b50565b60008061114583600261294790919063ffffffff16565b50905080915050919050565b600061118182604051806060016040528060298152602001613cba6029913960026129769092919063ffffffff16565b9050919050565b6000600d826040518082805190602001908083835b602083106111c0578051825260208201915060208101905060208303925061119d565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020549050600081141561126d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f5468617420746f6b656e20646f6573206e6f742065786973740000000000000081525060200191505060405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112af82611151565b73ffffffffffffffffffffffffffffffffffffffff16141561131c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180613dac602b913960400191505060405180910390fd5b600d826040518082805190602001908083835b60208310611352578051825260208201915060208101905060208303925061132f565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009055600c600082815260200190815260200160002060008082016000905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550506113df8161280d565b5050565b606060098054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561147b5780601f106114505761010080835404028352916020019161147b565b820191906000526020600020905b81548152906001019060200180831161145e57829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561150c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613c90602a913960400191505060405180910390fd5b611553600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612995565b9050919050565b611564600a6129aa565b6000611570600a6129c0565b905080600d836040518082805190602001908083835b602083106115a95780518252602082019150602081019050602083039250611586565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020819055506115e8613ae9565b60405180606001604052808681526020018581526020018773ffffffffffffffffffffffffffffffffffffffff16815250905080600c6000848152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050506000600e600084815260200190815260200160002060006101000a81548160ff0219169083151502179055506116e5600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836129ce565b6116f3816040015183610e76565b7fd9dc24857f317ed9abbbb42e920ede0104231eb1d3d70236a74887ffaf159868826040518082815260200191505060405180910390a1505050505050565b606060078054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117ca5780601f1061179f576101008083540402835291602001916117ca565b820191906000526020600020905b8154815290600101906020018083116117ad57829003601f168201915b5050505050905090565b6117dc6123e6565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561187d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4552433732313a20617070726f766520746f2063616c6c65720000000000000081525060200191505060405180910390fd5b806005600061188a6123e6565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166119376123e6565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b61199d6119976123e6565b836124bc565b6119f2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526031815260200180613df86031913960400191505060405180910390fd5b6119fe848484846129ec565b50505050565b6060611a0f826123c9565b611a64576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180613d7d602f913960400191505060405180910390fd5b6060600860008481526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b0d5780601f10611ae257610100808354040283529160200191611b0d565b820191906000526020600020905b815481529060010190602001808311611af057829003601f168201915b505050505090506060611b1e6113e3565b9050600081511415611b34578192505050611cd0565b600082511115611c055780826040516020018083805190602001908083835b60208310611b765780518252602082019150602081019050602083039250611b53565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b60208310611bc75780518252602082019150602081019050602083039250611ba4565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405292505050611cd0565b80611c0f85612a5e565b6040516020018083805190602001908083835b60208310611c455780518252602082019150602081019050602083039250611c22565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b60208310611c965780518252602082019150602081019050602083039250611c73565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052925050505b919050565b611cde816123c9565b611d50576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f5468617420746f6b656e20646f6573206e6f742065786973740000000000000081525060200191505060405180910390fd5b611d58613ae9565b600c600083815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905080600001513414611e5b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4d7573742070617920666f722064656c6976657279000000000000000000000081525060200191505060405180910390fd5b60011515600e600084815260200190815260200160002060009054906101000a900460ff16151514611ef5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4f72646572206d757374206265207061696420666f722066697273740000000081525060200191505060405180910390fd5b611f22600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16338461109c565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc836020015134019081150290604051600060405180830381858888f19350505050158015611fab573d6000803e3d6000fd5b507f608f6ac9327c2bf4d3c77adf447d2c448ba7b0971e0aaa9aa03f7ac29d874a44600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163334604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050565b61207b816123c9565b6120ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f5468617420746f6b656e20646f6573206e6f742065786973740000000000000081525060200191505060405180910390fd5b60001515600e600083815260200190815260200160002060009054906101000a900460ff16151514612187576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f54686973206f7264657220776173207061696420666f7220616c72656164790081525060200191505060405180910390fd5b61218f613ae9565b600c600083815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050905080602001513414612292576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4d7573742070617920666f7220746865206974656d20696e2066756c6c00000081525060200191505060405180910390fd5b6001600e600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600d826040518082805190602001908083835b6020831061238e578051825260208201915060208101905060208303925061236b565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020549050919050565b60006123df826002612ba590919063ffffffff16565b9050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661246183611151565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006124b582600001612bbf565b9050919050565b60006124c7826123c9565b61251c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180613c2c602c913960400191505060405180910390fd5b600061252783611151565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061259657508373ffffffffffffffffffffffffffffffffffffffff1661257e84610ddb565b73ffffffffffffffffffffffffffffffffffffffff16145b806125a757506125a681856122c2565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166125d082611151565b73ffffffffffffffffffffffffffffffffffffffff161461263c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180613d316029913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156126c2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180613be26024913960400191505060405180910390fd5b6126cd838383612bd0565b6126d86000826123ee565b61272981600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612d6190919063ffffffff16565b5061277b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612d7b90919063ffffffff16565b5061279281836002612d959092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60006128028360000183612dca565b60001c905092915050565b600061281882611151565b905061282681600084612bd0565b6128316000836123ee565b600060086000848152602001908152602001600020805460018160011615610100020316600290049050146128805760086000838152602001908152602001600020600061287f9190613b20565b5b6128d182600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612d6190919063ffffffff16565b506128e6826002612e4d90919063ffffffff16565b5081600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60008060008061295a8660000186612e67565b915091508160001c8160001c8090509350935050509250929050565b6000612989846000018460001b84612f00565b60001c90509392505050565b60006129a382600001612ff6565b9050919050565b6001816000016000828254019250508190555050565b600081600001549050919050565b6129e8828260405180602001604052806000815250613007565b5050565b6129f78484846125b0565b612a0384848484613078565b612a58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526032815260200180613bb06032913960400191505060405180910390fd5b50505050565b60606000821415612aa6576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612ba0565b600082905060005b60008214612ad0578080600101915050600a8281612ac857fe5b049150612aae565b60608167ffffffffffffffff81118015612ae957600080fd5b506040519080825280601f01601f191660200182016040528015612b1c5781602001600182028036833780820191505090505b50905060006001830390508593505b60008414612b9857600a8481612b3d57fe5b0660300160f81b82828060019003935081518110612b5757fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8481612b9057fe5b049350612b2b565b819450505050505b919050565b6000612bb7836000018360001b6132bd565b905092915050565b600081600001805490509050919050565b612bdb8383836132e0565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015612c455750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15612caa57612c5482826124bc565b612ca9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180613d5a6023913960400191505060405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612d5c57612ce983826124bc565b612d5b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6e6f7420617070726f76656420746f206275726e207468697320746f6b656e0081525060200191505060405180910390fd5b5b505050565b6000612d73836000018360001b6132e5565b905092915050565b6000612d8d836000018360001b6133cd565b905092915050565b6000612dc1846000018460001b8473ffffffffffffffffffffffffffffffffffffffff1660001b61343d565b90509392505050565b600081836000018054905011612e2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613b8e6022913960400191505060405180910390fd5b826000018281548110612e3a57fe5b9060005260206000200154905092915050565b6000612e5f836000018360001b613519565b905092915050565b60008082846000018054905011612ec9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180613ce36022913960400191505060405180910390fd5b6000846000018481548110612eda57fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b60008084600101600085815260200190815260200160002054905060008114158390612fc7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612f8c578082015181840152602081019050612f71565b50505050905090810190601f168015612fb95780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50846000016001820381548110612fda57fe5b9060005260206000209060020201600101549150509392505050565b600081600001805490509050919050565b6130118383613632565b61301e6000848484613078565b613073576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526032815260200180613bb06032913960400191505060405180910390fd5b505050565b60006130998473ffffffffffffffffffffffffffffffffffffffff16613826565b6130a657600190506132b5565b606061323c63150b7a0260e01b6130bb6123e6565b888787604051602401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561316b578082015181840152602081019050613150565b50505050905090810190601f1680156131985780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051806060016040528060328152602001613bb0603291398773ffffffffffffffffffffffffffffffffffffffff166138399092919063ffffffff16565b9050600081806020019051602081101561325557600080fd5b8101908080519060200190929190505050905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614925050505b949350505050565b600080836001016000848152602001908152602001600020541415905092915050565b505050565b600080836001016000848152602001908152602001600020549050600081146133c1576000600182039050600060018660000180549050039050600086600001828154811061333057fe5b906000526020600020015490508087600001848154811061334d57fe5b906000526020600020018190555060018301876001016000838152602001908152602001600020819055508660000180548061338557fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506133c7565b60009150505b92915050565b60006133d98383613851565b613432578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050613437565b600090505b92915050565b60008084600101600085815260200190815260200160002054905060008114156134e457846000016040518060400160405280868152602001858152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550508460000180549050856001016000868152602001908152602001600020819055506001915050613512565b828560000160018303815481106134f757fe5b90600052602060002090600202016001018190555060009150505b9392505050565b60008083600101600084815260200190815260200160002054905060008114613626576000600182039050600060018660000180549050039050600086600001828154811061356457fe5b906000526020600020906002020190508087600001848154811061358457fe5b90600052602060002090600202016000820154816000015560018201548160010155905050600183018760010160008360000154815260200190815260200160002081905550866000018054806135d757fe5b600190038181906000526020600020906002020160008082016000905560018201600090555050905586600101600087815260200190815260200160002060009055600194505050505061362c565b60009150505b92915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156136d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4552433732313a206d696e7420746f20746865207a65726f206164647265737381525060200191505060405180910390fd5b6136de816123c9565b15613751576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000081525060200191505060405180910390fd5b61375d60008383612bd0565b6137ae81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612d7b90919063ffffffff16565b506137c581836002612d959092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080823b905060008111915050919050565b60606138488484600085613874565b90509392505050565b600080836001016000848152602001908152602001600020541415905092915050565b6060824710156138cf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613c066026913960400191505060405180910390fd5b6138d885613826565b61394a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b6020831061399a5780518252602082019150602081019050602083039250613977565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146139fc576040519150601f19603f3d011682016040523d82523d6000602084013e613a01565b606091505b5091509150613a11828286613a1d565b92505050949350505050565b60608315613a2d57829050613ae2565b600083511115613a405782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613aa7578082015181840152602081019050613a8c565b50505050905090810190601f168015613ad45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b60405180606001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b50805460018160011615610100020316600290046000825580601f10613b465750613b65565b601f016020900490600052602060002090810190613b649190613b68565b5b50565b613b8a91905b80821115613b86576000816000905550600101613b6e565b5090565b9056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a207472616e7366657220746f20746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e6e6f7420617070726f76656420746f207472616e73666572207468697320746f6b656e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e54686520746f6b656e2063616e206f6e6c79206265206275726e65642061667465722064656c69766572794552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a2646970667358221220daea230e2f27341ae15173a123d273e34870301e3b1ff02d33cc9be0f78f84e864736f6c63430006080033",
}

// DeliveryContractABI is the input ABI used to generate the binding from.
// Deprecated: Use DeliveryContractMetaData.ABI instead.
var DeliveryContractABI = DeliveryContractMetaData.ABI

// DeliveryContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DeliveryContractMetaData.Bin instead.
var DeliveryContractBin = DeliveryContractMetaData.Bin

// DeployDeliveryContract deploys a new Ethereum contract, binding an instance of DeliveryContract to it.
func DeployDeliveryContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DeliveryContract, error) {
	parsed, err := DeliveryContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DeliveryContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DeliveryContract{DeliveryContractCaller: DeliveryContractCaller{contract: contract}, DeliveryContractTransactor: DeliveryContractTransactor{contract: contract}, DeliveryContractFilterer: DeliveryContractFilterer{contract: contract}}, nil
}

// DeliveryContract is an auto generated Go binding around an Ethereum contract.
type DeliveryContract struct {
	DeliveryContractCaller     // Read-only binding to the contract
	DeliveryContractTransactor // Write-only binding to the contract
	DeliveryContractFilterer   // Log filterer for contract events
}

// DeliveryContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type DeliveryContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DeliveryContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DeliveryContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DeliveryContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DeliveryContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DeliveryContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DeliveryContractSession struct {
	Contract     *DeliveryContract // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DeliveryContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DeliveryContractCallerSession struct {
	Contract *DeliveryContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// DeliveryContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DeliveryContractTransactorSession struct {
	Contract     *DeliveryContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// DeliveryContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type DeliveryContractRaw struct {
	Contract *DeliveryContract // Generic contract binding to access the raw methods on
}

// DeliveryContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DeliveryContractCallerRaw struct {
	Contract *DeliveryContractCaller // Generic read-only contract binding to access the raw methods on
}

// DeliveryContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DeliveryContractTransactorRaw struct {
	Contract *DeliveryContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDeliveryContract creates a new instance of DeliveryContract, bound to a specific deployed contract.
func NewDeliveryContract(address common.Address, backend bind.ContractBackend) (*DeliveryContract, error) {
	contract, err := bindDeliveryContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DeliveryContract{DeliveryContractCaller: DeliveryContractCaller{contract: contract}, DeliveryContractTransactor: DeliveryContractTransactor{contract: contract}, DeliveryContractFilterer: DeliveryContractFilterer{contract: contract}}, nil
}

// NewDeliveryContractCaller creates a new read-only instance of DeliveryContract, bound to a specific deployed contract.
func NewDeliveryContractCaller(address common.Address, caller bind.ContractCaller) (*DeliveryContractCaller, error) {
	contract, err := bindDeliveryContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DeliveryContractCaller{contract: contract}, nil
}

// NewDeliveryContractTransactor creates a new write-only instance of DeliveryContract, bound to a specific deployed contract.
func NewDeliveryContractTransactor(address common.Address, transactor bind.ContractTransactor) (*DeliveryContractTransactor, error) {
	contract, err := bindDeliveryContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DeliveryContractTransactor{contract: contract}, nil
}

// NewDeliveryContractFilterer creates a new log filterer instance of DeliveryContract, bound to a specific deployed contract.
func NewDeliveryContractFilterer(address common.Address, filterer bind.ContractFilterer) (*DeliveryContractFilterer, error) {
	contract, err := bindDeliveryContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DeliveryContractFilterer{contract: contract}, nil
}

// bindDeliveryContract binds a generic wrapper to an already deployed contract.
func bindDeliveryContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DeliveryContractABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DeliveryContract *DeliveryContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DeliveryContract.Contract.DeliveryContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DeliveryContract *DeliveryContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DeliveryContract.Contract.DeliveryContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DeliveryContract *DeliveryContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DeliveryContract.Contract.DeliveryContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DeliveryContract *DeliveryContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DeliveryContract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DeliveryContract *DeliveryContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DeliveryContract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DeliveryContract *DeliveryContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DeliveryContract.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_DeliveryContract *DeliveryContractCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_DeliveryContract *DeliveryContractSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _DeliveryContract.Contract.BalanceOf(&_DeliveryContract.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_DeliveryContract *DeliveryContractCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _DeliveryContract.Contract.BalanceOf(&_DeliveryContract.CallOpts, owner)
}

// BaseURI is a free data retrieval call binding the contract method 0x6c0360eb.
//
// Solidity: function baseURI() view returns(string)
func (_DeliveryContract *DeliveryContractCaller) BaseURI(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "baseURI")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// BaseURI is a free data retrieval call binding the contract method 0x6c0360eb.
//
// Solidity: function baseURI() view returns(string)
func (_DeliveryContract *DeliveryContractSession) BaseURI() (string, error) {
	return _DeliveryContract.Contract.BaseURI(&_DeliveryContract.CallOpts)
}

// BaseURI is a free data retrieval call binding the contract method 0x6c0360eb.
//
// Solidity: function baseURI() view returns(string)
func (_DeliveryContract *DeliveryContractCallerSession) BaseURI() (string, error) {
	return _DeliveryContract.Contract.BaseURI(&_DeliveryContract.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_DeliveryContract *DeliveryContractCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_DeliveryContract *DeliveryContractSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _DeliveryContract.Contract.GetApproved(&_DeliveryContract.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_DeliveryContract *DeliveryContractCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _DeliveryContract.Contract.GetApproved(&_DeliveryContract.CallOpts, tokenId)
}

// GetTokenIdForOrder is a free data retrieval call binding the contract method 0xf7008124.
//
// Solidity: function getTokenIdForOrder(string orderId) view returns(uint256)
func (_DeliveryContract *DeliveryContractCaller) GetTokenIdForOrder(opts *bind.CallOpts, orderId string) (*big.Int, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "getTokenIdForOrder", orderId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTokenIdForOrder is a free data retrieval call binding the contract method 0xf7008124.
//
// Solidity: function getTokenIdForOrder(string orderId) view returns(uint256)
func (_DeliveryContract *DeliveryContractSession) GetTokenIdForOrder(orderId string) (*big.Int, error) {
	return _DeliveryContract.Contract.GetTokenIdForOrder(&_DeliveryContract.CallOpts, orderId)
}

// GetTokenIdForOrder is a free data retrieval call binding the contract method 0xf7008124.
//
// Solidity: function getTokenIdForOrder(string orderId) view returns(uint256)
func (_DeliveryContract *DeliveryContractCallerSession) GetTokenIdForOrder(orderId string) (*big.Int, error) {
	return _DeliveryContract.Contract.GetTokenIdForOrder(&_DeliveryContract.CallOpts, orderId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_DeliveryContract *DeliveryContractCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_DeliveryContract *DeliveryContractSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _DeliveryContract.Contract.IsApprovedForAll(&_DeliveryContract.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_DeliveryContract *DeliveryContractCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _DeliveryContract.Contract.IsApprovedForAll(&_DeliveryContract.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DeliveryContract *DeliveryContractCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DeliveryContract *DeliveryContractSession) Name() (string, error) {
	return _DeliveryContract.Contract.Name(&_DeliveryContract.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DeliveryContract *DeliveryContractCallerSession) Name() (string, error) {
	return _DeliveryContract.Contract.Name(&_DeliveryContract.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_DeliveryContract *DeliveryContractCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_DeliveryContract *DeliveryContractSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _DeliveryContract.Contract.OwnerOf(&_DeliveryContract.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_DeliveryContract *DeliveryContractCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _DeliveryContract.Contract.OwnerOf(&_DeliveryContract.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DeliveryContract *DeliveryContractCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DeliveryContract *DeliveryContractSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DeliveryContract.Contract.SupportsInterface(&_DeliveryContract.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DeliveryContract *DeliveryContractCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DeliveryContract.Contract.SupportsInterface(&_DeliveryContract.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DeliveryContract *DeliveryContractCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DeliveryContract *DeliveryContractSession) Symbol() (string, error) {
	return _DeliveryContract.Contract.Symbol(&_DeliveryContract.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DeliveryContract *DeliveryContractCallerSession) Symbol() (string, error) {
	return _DeliveryContract.Contract.Symbol(&_DeliveryContract.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_DeliveryContract *DeliveryContractCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_DeliveryContract *DeliveryContractSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _DeliveryContract.Contract.TokenByIndex(&_DeliveryContract.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_DeliveryContract *DeliveryContractCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _DeliveryContract.Contract.TokenByIndex(&_DeliveryContract.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_DeliveryContract *DeliveryContractCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_DeliveryContract *DeliveryContractSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _DeliveryContract.Contract.TokenOfOwnerByIndex(&_DeliveryContract.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_DeliveryContract *DeliveryContractCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _DeliveryContract.Contract.TokenOfOwnerByIndex(&_DeliveryContract.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_DeliveryContract *DeliveryContractCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_DeliveryContract *DeliveryContractSession) TokenURI(tokenId *big.Int) (string, error) {
	return _DeliveryContract.Contract.TokenURI(&_DeliveryContract.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_DeliveryContract *DeliveryContractCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _DeliveryContract.Contract.TokenURI(&_DeliveryContract.CallOpts, tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DeliveryContract *DeliveryContractCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DeliveryContract.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DeliveryContract *DeliveryContractSession) TotalSupply() (*big.Int, error) {
	return _DeliveryContract.Contract.TotalSupply(&_DeliveryContract.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DeliveryContract *DeliveryContractCallerSession) TotalSupply() (*big.Int, error) {
	return _DeliveryContract.Contract.TotalSupply(&_DeliveryContract.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.Approve(&_DeliveryContract.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.Approve(&_DeliveryContract.TransactOpts, to, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractTransactor) Burn(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.contract.Transact(opts, "burn", tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.Burn(&_DeliveryContract.TransactOpts, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractTransactorSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.Burn(&_DeliveryContract.TransactOpts, tokenId)
}

// BurnTokenByOrderId is a paid mutator transaction binding the contract method 0x6556e748.
//
// Solidity: function burnTokenByOrderId(string orderId) returns()
func (_DeliveryContract *DeliveryContractTransactor) BurnTokenByOrderId(opts *bind.TransactOpts, orderId string) (*types.Transaction, error) {
	return _DeliveryContract.contract.Transact(opts, "burnTokenByOrderId", orderId)
}

// BurnTokenByOrderId is a paid mutator transaction binding the contract method 0x6556e748.
//
// Solidity: function burnTokenByOrderId(string orderId) returns()
func (_DeliveryContract *DeliveryContractSession) BurnTokenByOrderId(orderId string) (*types.Transaction, error) {
	return _DeliveryContract.Contract.BurnTokenByOrderId(&_DeliveryContract.TransactOpts, orderId)
}

// BurnTokenByOrderId is a paid mutator transaction binding the contract method 0x6556e748.
//
// Solidity: function burnTokenByOrderId(string orderId) returns()
func (_DeliveryContract *DeliveryContractTransactorSession) BurnTokenByOrderId(orderId string) (*types.Transaction, error) {
	return _DeliveryContract.Contract.BurnTokenByOrderId(&_DeliveryContract.TransactOpts, orderId)
}

// Buy is a paid mutator transaction binding the contract method 0xd96a094a.
//
// Solidity: function buy(uint256 tokenId) payable returns()
func (_DeliveryContract *DeliveryContractTransactor) Buy(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.contract.Transact(opts, "buy", tokenId)
}

// Buy is a paid mutator transaction binding the contract method 0xd96a094a.
//
// Solidity: function buy(uint256 tokenId) payable returns()
func (_DeliveryContract *DeliveryContractSession) Buy(tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.Buy(&_DeliveryContract.TransactOpts, tokenId)
}

// Buy is a paid mutator transaction binding the contract method 0xd96a094a.
//
// Solidity: function buy(uint256 tokenId) payable returns()
func (_DeliveryContract *DeliveryContractTransactorSession) Buy(tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.Buy(&_DeliveryContract.TransactOpts, tokenId)
}

// MintToken is a paid mutator transaction binding the contract method 0x87c6649c.
//
// Solidity: function mintToken(address allowedPurchaser, uint256 deliveryPrice, uint256 orderPrice, string orderId) payable returns()
func (_DeliveryContract *DeliveryContractTransactor) MintToken(opts *bind.TransactOpts, allowedPurchaser common.Address, deliveryPrice *big.Int, orderPrice *big.Int, orderId string) (*types.Transaction, error) {
	return _DeliveryContract.contract.Transact(opts, "mintToken", allowedPurchaser, deliveryPrice, orderPrice, orderId)
}

// MintToken is a paid mutator transaction binding the contract method 0x87c6649c.
//
// Solidity: function mintToken(address allowedPurchaser, uint256 deliveryPrice, uint256 orderPrice, string orderId) payable returns()
func (_DeliveryContract *DeliveryContractSession) MintToken(allowedPurchaser common.Address, deliveryPrice *big.Int, orderPrice *big.Int, orderId string) (*types.Transaction, error) {
	return _DeliveryContract.Contract.MintToken(&_DeliveryContract.TransactOpts, allowedPurchaser, deliveryPrice, orderPrice, orderId)
}

// MintToken is a paid mutator transaction binding the contract method 0x87c6649c.
//
// Solidity: function mintToken(address allowedPurchaser, uint256 deliveryPrice, uint256 orderPrice, string orderId) payable returns()
func (_DeliveryContract *DeliveryContractTransactorSession) MintToken(allowedPurchaser common.Address, deliveryPrice *big.Int, orderPrice *big.Int, orderId string) (*types.Transaction, error) {
	return _DeliveryContract.Contract.MintToken(&_DeliveryContract.TransactOpts, allowedPurchaser, deliveryPrice, orderPrice, orderId)
}

// PayForGoods is a paid mutator transaction binding the contract method 0xe26d15e4.
//
// Solidity: function payForGoods(uint256 tokenId) payable returns()
func (_DeliveryContract *DeliveryContractTransactor) PayForGoods(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.contract.Transact(opts, "payForGoods", tokenId)
}

// PayForGoods is a paid mutator transaction binding the contract method 0xe26d15e4.
//
// Solidity: function payForGoods(uint256 tokenId) payable returns()
func (_DeliveryContract *DeliveryContractSession) PayForGoods(tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.PayForGoods(&_DeliveryContract.TransactOpts, tokenId)
}

// PayForGoods is a paid mutator transaction binding the contract method 0xe26d15e4.
//
// Solidity: function payForGoods(uint256 tokenId) payable returns()
func (_DeliveryContract *DeliveryContractTransactorSession) PayForGoods(tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.PayForGoods(&_DeliveryContract.TransactOpts, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.SafeTransferFrom(&_DeliveryContract.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.SafeTransferFrom(&_DeliveryContract.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_DeliveryContract *DeliveryContractTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _DeliveryContract.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_DeliveryContract *DeliveryContractSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _DeliveryContract.Contract.SafeTransferFrom0(&_DeliveryContract.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_DeliveryContract *DeliveryContractTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _DeliveryContract.Contract.SafeTransferFrom0(&_DeliveryContract.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_DeliveryContract *DeliveryContractTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _DeliveryContract.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_DeliveryContract *DeliveryContractSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _DeliveryContract.Contract.SetApprovalForAll(&_DeliveryContract.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_DeliveryContract *DeliveryContractTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _DeliveryContract.Contract.SetApprovalForAll(&_DeliveryContract.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.TransferFrom(&_DeliveryContract.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_DeliveryContract *DeliveryContractTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryContract.Contract.TransferFrom(&_DeliveryContract.TransactOpts, from, to, tokenId)
}

// DeliveryContractApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the DeliveryContract contract.
type DeliveryContractApprovalIterator struct {
	Event *DeliveryContractApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DeliveryContractApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DeliveryContractApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DeliveryContractApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DeliveryContractApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DeliveryContractApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DeliveryContractApproval represents a Approval event raised by the DeliveryContract contract.
type DeliveryContractApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_DeliveryContract *DeliveryContractFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*DeliveryContractApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _DeliveryContract.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &DeliveryContractApprovalIterator{contract: _DeliveryContract.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_DeliveryContract *DeliveryContractFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *DeliveryContractApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _DeliveryContract.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DeliveryContractApproval)
				if err := _DeliveryContract.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_DeliveryContract *DeliveryContractFilterer) ParseApproval(log types.Log) (*DeliveryContractApproval, error) {
	event := new(DeliveryContractApproval)
	if err := _DeliveryContract.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DeliveryContractApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the DeliveryContract contract.
type DeliveryContractApprovalForAllIterator struct {
	Event *DeliveryContractApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DeliveryContractApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DeliveryContractApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DeliveryContractApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DeliveryContractApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DeliveryContractApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DeliveryContractApprovalForAll represents a ApprovalForAll event raised by the DeliveryContract contract.
type DeliveryContractApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_DeliveryContract *DeliveryContractFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*DeliveryContractApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _DeliveryContract.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &DeliveryContractApprovalForAllIterator{contract: _DeliveryContract.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_DeliveryContract *DeliveryContractFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *DeliveryContractApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _DeliveryContract.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DeliveryContractApprovalForAll)
				if err := _DeliveryContract.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_DeliveryContract *DeliveryContractFilterer) ParseApprovalForAll(log types.Log) (*DeliveryContractApprovalForAll, error) {
	event := new(DeliveryContractApprovalForAll)
	if err := _DeliveryContract.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DeliveryContractNFTMintedIterator is returned from FilterNFTMinted and is used to iterate over the raw logs and unpacked data for NFTMinted events raised by the DeliveryContract contract.
type DeliveryContractNFTMintedIterator struct {
	Event *DeliveryContractNFTMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DeliveryContractNFTMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DeliveryContractNFTMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DeliveryContractNFTMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DeliveryContractNFTMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DeliveryContractNFTMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DeliveryContractNFTMinted represents a NFTMinted event raised by the DeliveryContract contract.
type DeliveryContractNFTMinted struct {
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNFTMinted is a free log retrieval operation binding the contract event 0xd9dc24857f317ed9abbbb42e920ede0104231eb1d3d70236a74887ffaf159868.
//
// Solidity: event NFTMinted(uint256 _tokenId)
func (_DeliveryContract *DeliveryContractFilterer) FilterNFTMinted(opts *bind.FilterOpts) (*DeliveryContractNFTMintedIterator, error) {

	logs, sub, err := _DeliveryContract.contract.FilterLogs(opts, "NFTMinted")
	if err != nil {
		return nil, err
	}
	return &DeliveryContractNFTMintedIterator{contract: _DeliveryContract.contract, event: "NFTMinted", logs: logs, sub: sub}, nil
}

// WatchNFTMinted is a free log subscription operation binding the contract event 0xd9dc24857f317ed9abbbb42e920ede0104231eb1d3d70236a74887ffaf159868.
//
// Solidity: event NFTMinted(uint256 _tokenId)
func (_DeliveryContract *DeliveryContractFilterer) WatchNFTMinted(opts *bind.WatchOpts, sink chan<- *DeliveryContractNFTMinted) (event.Subscription, error) {

	logs, sub, err := _DeliveryContract.contract.WatchLogs(opts, "NFTMinted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DeliveryContractNFTMinted)
				if err := _DeliveryContract.contract.UnpackLog(event, "NFTMinted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNFTMinted is a log parse operation binding the contract event 0xd9dc24857f317ed9abbbb42e920ede0104231eb1d3d70236a74887ffaf159868.
//
// Solidity: event NFTMinted(uint256 _tokenId)
func (_DeliveryContract *DeliveryContractFilterer) ParseNFTMinted(log types.Log) (*DeliveryContractNFTMinted, error) {
	event := new(DeliveryContractNFTMinted)
	if err := _DeliveryContract.contract.UnpackLog(event, "NFTMinted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DeliveryContractNftBoughtIterator is returned from FilterNftBought and is used to iterate over the raw logs and unpacked data for NftBought events raised by the DeliveryContract contract.
type DeliveryContractNftBoughtIterator struct {
	Event *DeliveryContractNftBought // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DeliveryContractNftBoughtIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DeliveryContractNftBought)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DeliveryContractNftBought)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DeliveryContractNftBoughtIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DeliveryContractNftBoughtIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DeliveryContractNftBought represents a NftBought event raised by the DeliveryContract contract.
type DeliveryContractNftBought struct {
	Seller common.Address
	Buyer  common.Address
	Price  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterNftBought is a free log retrieval operation binding the contract event 0x608f6ac9327c2bf4d3c77adf447d2c448ba7b0971e0aaa9aa03f7ac29d874a44.
//
// Solidity: event NftBought(address _seller, address _buyer, uint256 _price)
func (_DeliveryContract *DeliveryContractFilterer) FilterNftBought(opts *bind.FilterOpts) (*DeliveryContractNftBoughtIterator, error) {

	logs, sub, err := _DeliveryContract.contract.FilterLogs(opts, "NftBought")
	if err != nil {
		return nil, err
	}
	return &DeliveryContractNftBoughtIterator{contract: _DeliveryContract.contract, event: "NftBought", logs: logs, sub: sub}, nil
}

// WatchNftBought is a free log subscription operation binding the contract event 0x608f6ac9327c2bf4d3c77adf447d2c448ba7b0971e0aaa9aa03f7ac29d874a44.
//
// Solidity: event NftBought(address _seller, address _buyer, uint256 _price)
func (_DeliveryContract *DeliveryContractFilterer) WatchNftBought(opts *bind.WatchOpts, sink chan<- *DeliveryContractNftBought) (event.Subscription, error) {

	logs, sub, err := _DeliveryContract.contract.WatchLogs(opts, "NftBought")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DeliveryContractNftBought)
				if err := _DeliveryContract.contract.UnpackLog(event, "NftBought", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNftBought is a log parse operation binding the contract event 0x608f6ac9327c2bf4d3c77adf447d2c448ba7b0971e0aaa9aa03f7ac29d874a44.
//
// Solidity: event NftBought(address _seller, address _buyer, uint256 _price)
func (_DeliveryContract *DeliveryContractFilterer) ParseNftBought(log types.Log) (*DeliveryContractNftBought, error) {
	event := new(DeliveryContractNftBought)
	if err := _DeliveryContract.contract.UnpackLog(event, "NftBought", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DeliveryContractTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the DeliveryContract contract.
type DeliveryContractTransferIterator struct {
	Event *DeliveryContractTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DeliveryContractTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DeliveryContractTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DeliveryContractTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DeliveryContractTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DeliveryContractTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DeliveryContractTransfer represents a Transfer event raised by the DeliveryContract contract.
type DeliveryContractTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_DeliveryContract *DeliveryContractFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*DeliveryContractTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _DeliveryContract.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &DeliveryContractTransferIterator{contract: _DeliveryContract.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_DeliveryContract *DeliveryContractFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *DeliveryContractTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _DeliveryContract.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DeliveryContractTransfer)
				if err := _DeliveryContract.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_DeliveryContract *DeliveryContractFilterer) ParseTransfer(log types.Log) (*DeliveryContractTransfer, error) {
	event := new(DeliveryContractTransfer)
	if err := _DeliveryContract.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
