// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// DeliveryTokenMetaData contains all meta data concerning the DeliveryToken contract.
var DeliveryTokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"NftBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"URI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"monetaryValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_allowedPurchaser\",\"type\":\"address\"}],\"name\":\"mintToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchasePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040526000600b60006101000a81548160ff0219169083151502179055506000600e5560405180606001604052806021815260200162003a9060219139600f908051906020019062000055929190620002b4565b503480156200006357600080fd5b506040518060400160405280600d81526020017f44656c6976657279546f6b656e000000000000000000000000000000000000008152506040518060400160405280600381526020017f444c560000000000000000000000000000000000000000000000000000000000815250620000e86301ffc9a760e01b620001ab60201b60201c565b816006908051906020019062000100929190620002b4565b50806007908051906020019062000119929190620002b4565b50620001326380ac58cd60e01b620001ab60201b60201c565b6200014a635b5e139f60e01b620001ab60201b60201c565b6200016263780e9d6360e01b620001ab60201b60201c565b505033600b60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000363565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141562000248576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4552433136353a20696e76616c696420696e746572666163652069640000000081525060200191505060405180910390fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002f757805160ff191683800117855562000328565b8280016001018555821562000328579182015b82811115620003275782518255916020019190600101906200030a565b5b5090506200033791906200033b565b5090565b6200036091905b808211156200035c57600081600090555060010162000342565b5090565b90565b61371d80620003736000396000f3fe6080604052600436106101665760003560e01c80636352211e116100d1578063a22cb4651161008a578063c87b56dd11610064578063c87b56dd14610a36578063defd6c5f14610aea578063e985e9c514610b15578063faa0a26414610b9e57610166565b8063a22cb465146108bd578063a6f2ae3a1461091a578063b88d4fde1461092457610166565b80636352211e146106185780636c0360eb1461069357806370a0823114610723578063893d20e81461078857806395d89b41146107df578063a140ae231461086f57610166565b806323b872dd1161012357806323b872dd146103fe5780632f745c591461047957806342842e0e146104e857806342966c68146105635780634f6ccce71461059e5780635d1ca631146105ed57610166565b806301ffc9a71461016b57806306fdde03146101dd578063081812fc1461026d578063095ea7b3146102e85780631141d7de1461034357806318160ddd146103d3575b600080fd5b34801561017757600080fd5b506101c36004803603602081101561018e57600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610bb5565b604051808215151515815260200191505060405180910390f35b3480156101e957600080fd5b506101f2610c1c565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610232578082015181840152602081019050610217565b50505050905090810190601f16801561025f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561027957600080fd5b506102a66004803603602081101561029057600080fd5b8101908080359060200190929190505050610cbe565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102f457600080fd5b506103416004803603604081101561030b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d59565b005b34801561034f57600080fd5b50610358610e9d565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561039857808201518184015260208101905061037d565b50505050905090810190601f1680156103c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103df57600080fd5b506103e8610f3b565b6040518082815260200191505060405180910390f35b34801561040a57600080fd5b506104776004803603606081101561042157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f4c565b005b34801561048557600080fd5b506104d26004803603604081101561049c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fc2565b6040518082815260200191505060405180910390f35b3480156104f457600080fd5b506105616004803603606081101561050b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061101d565b005b34801561056f57600080fd5b5061059c6004803603602081101561058657600080fd5b810190808035906020019092919050505061103d565b005b3480156105aa57600080fd5b506105d7600480360360208110156105c157600080fd5b81019080803590602001909291905050506110af565b6040518082815260200191505060405180910390f35b3480156105f957600080fd5b506106026110d2565b6040518082815260200191505060405180910390f35b34801561062457600080fd5b506106516004803603602081101561063b57600080fd5b81019080803590602001909291905050506110dc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561069f57600080fd5b506106a8611113565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106e85780820151818401526020810190506106cd565b50505050905090810190601f1680156107155780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561072f57600080fd5b506107726004803603602081101561074657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111b5565b6040518082815260200191505060405180910390f35b34801561079457600080fd5b5061079d61128a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107eb57600080fd5b506107f46112b4565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610834578082015181840152602081019050610819565b50505050905090810190601f1680156108615780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6108bb6004803603604081101561088557600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611356565b005b3480156108c957600080fd5b50610918600480360360408110156108e057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506113d1565b005b610922611589565b005b34801561093057600080fd5b50610a346004803603608081101561094757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156109ae57600080fd5b8201836020820111156109c057600080fd5b803590602001918460018302840111640100000000831117156109e257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611896565b005b348015610a4257600080fd5b50610a6f60048036036020811015610a5957600080fd5b810190808035906020019092919050505061190e565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610aaf578082015181840152602081019050610a94565b50505050905090810190601f168015610adc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610af657600080fd5b50610aff611bdf565b6040518082815260200191505060405180910390f35b348015610b2157600080fd5b50610b8460048036036040811015610b3857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611be5565b604051808215151515815260200191505060405180910390f35b348015610baa57600080fd5b50610bb3611c79565b005b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cb45780601f10610c8957610100808354040283529160200191610cb4565b820191906000526020600020905b815481529060010190602001808311610c9757829003601f168201915b5050505050905090565b6000610cc982611d2c565b610d1e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001806135bc602c913960400191505060405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610d64826110dc565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610deb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806136406021913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610e0a611d49565b73ffffffffffffffffffffffffffffffffffffffff161480610e395750610e3881610e33611d49565b611be5565b5b610e8e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603881526020018061350f6038913960400191505060405180910390fd5b610e988383611d51565b505050565b600f8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f335780601f10610f0857610100808354040283529160200191610f33565b820191906000526020600020905b815481529060010190602001808311610f1657829003601f168201915b505050505081565b6000610f476002611e0a565b905090565b610f5d610f57611d49565b82611e1f565b610fb2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806136616031913960400191505060405180910390fd5b610fbd838383611f13565b505050565b600061101582600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061215690919063ffffffff16565b905092915050565b61103883838360405180602001604052806000815250611896565b505050565b61104e611048611d49565b82611e1f565b6110a3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806136b86030913960400191505060405180910390fd5b6110ac81612170565b50565b6000806110c68360026122aa90919063ffffffff16565b50905080915050919050565b6000600d54905090565b600061110c826040518060600160405280602981526020016135716029913960026122d99092919063ffffffff16565b9050919050565b606060098054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111ab5780601f10611180576101008083540402835291602001916111ab565b820191906000526020600020905b81548152906001019060200180831161118e57829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561123c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613547602a913960400191505060405180910390fd5b611283600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206122f8565b9050919050565b6000600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060078054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561134c5780601f106113215761010080835404028352916020019161134c565b820191906000526020600020905b81548152906001019060200180831161132f57829003601f168201915b5050505050905090565b60001515600b60009054906101000a900460ff161515146113c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806134686031913960400191505060405180910390fd5b6113cd33838361230d565b5050565b6113d9611d49565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561147a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4552433732313a20617070726f766520746f2063616c6c65720000000000000081525060200191505060405180910390fd5b8060056000611487611d49565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611534611d49565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461164c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4e6f7420616e20617070726f766564207573657200000000000000000000000081525060200191505060405180910390fd5b34600e54146116c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f57726f6e6720707572636861736520707269636500000000000000000000000081525060200191505060405180910390fd5b60006116d0600d546110dc565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611757576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806136926026913960400191505060405180910390fd5b6117648133600d54611f13565b8073ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156117aa573d6000803e3d6000fd5b5033600b60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600e819055507f608f6ac9327c2bf4d3c77adf447d2c448ba7b0971e0aaa9aa03f7ac29d874a44813334604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a150565b6118a76118a1611d49565b83611e1f565b6118fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806136616031913960400191505060405180910390fd5b611908848484846123d4565b50505050565b606061191982611d2c565b61196e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180613611602f913960400191505060405180910390fd5b6060600860008481526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a175780601f106119ec57610100808354040283529160200191611a17565b820191906000526020600020905b8154815290600101906020018083116119fa57829003601f168201915b505050505090506060611a28611113565b9050600081511415611a3e578192505050611bda565b600082511115611b0f5780826040516020018083805190602001908083835b60208310611a805780518252602082019150602081019050602083039250611a5d565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b60208310611ad15780518252602082019150602081019050602083039250611aae565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405292505050611bda565b80611b1985612446565b6040516020018083805190602001908083835b60208310611b4f5780518252602082019150602081019050602083039250611b2c565b6001836020036101000a03801982511681845116808217855250505050505090500182805190602001908083835b60208310611ba05780518252602082019150602081019050602083039250611b7d565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051602081830303815290604052925050505b919050565b600e5481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600b60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611d1f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806134446024913960400191505060405180910390fd5b611d2a600d54612170565b565b6000611d4282600261258d90919063ffffffff16565b9050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611dc4836110dc565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611e18826000016125a7565b9050919050565b6000611e2a82611d2c565b611e7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001806134e3602c913960400191505060405180910390fd5b6000611e8a836110dc565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611ef957508373ffffffffffffffffffffffffffffffffffffffff16611ee184610cbe565b73ffffffffffffffffffffffffffffffffffffffff16145b80611f0a5750611f098185611be5565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611f33826110dc565b73ffffffffffffffffffffffffffffffffffffffff1614611f9f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806135e86029913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612025576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806134996024913960400191505060405180910390fd5b6120308383836125b8565b61203b600082611d51565b61208c81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206125bd90919063ffffffff16565b506120de81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206125d790919063ffffffff16565b506120f5818360026125f19092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60006121658360000183612626565b60001c905092915050565b600061217b826110dc565b9050612189816000846125b8565b612194600083611d51565b600060086000848152602001908152602001600020805460018160011615610100020316600290049050146121e3576008600083815260200190815260200160002060006121e29190613382565b5b61223482600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206125bd90919063ffffffff16565b506122498260026126a990919063ffffffff16565b5081600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000806000806122bd86600001866126c3565b915091508160001c8160001c8090509350935050509250929050565b60006122ec846000018460001b8461275c565b60001c90509392505050565b600061230682600001612852565b9050919050565b612317600a612863565b612321600a612879565b600d819055506001600b60006101000a81548160ff02191690831515021790555081600e8190555080600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061239683600d54612887565b7fd9dc24857f317ed9abbbb42e920ede0104231eb1d3d70236a74887ffaf159868600d546040518082815260200191505060405180910390a1505050565b6123df848484611f13565b6123eb848484846128a5565b612440576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001806134126032913960400191505060405180910390fd5b50505050565b6060600082141561248e576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612588565b600082905060005b600082146124b8578080600101915050600a82816124b057fe5b049150612496565b60608167ffffffffffffffff811180156124d157600080fd5b506040519080825280601f01601f1916602001820160405280156125045781602001600182028036833780820191505090505b50905060006001830390508593505b6000841461258057600a848161252557fe5b0660300160f81b8282806001900393508151811061253f57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a848161257857fe5b049350612513565b819450505050505b919050565b600061259f836000018360001b612aea565b905092915050565b600081600001805490509050919050565b505050565b60006125cf836000018360001b612b0d565b905092915050565b60006125e9836000018360001b612bf5565b905092915050565b600061261d846000018460001b8473ffffffffffffffffffffffffffffffffffffffff1660001b612c65565b90509392505050565b600081836000018054905011612687576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806133f06022913960400191505060405180910390fd5b82600001828154811061269657fe5b9060005260206000200154905092915050565b60006126bb836000018360001b612d41565b905092915050565b60008082846000018054905011612725576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018061359a6022913960400191505060405180910390fd5b600084600001848154811061273657fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b60008084600101600085815260200190815260200160002054905060008114158390612823576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156127e85780820151818401526020810190506127cd565b50505050905090810190601f1680156128155780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061283657fe5b9060005260206000209060020201600101549150509392505050565b600081600001805490509050919050565b6001816000016000828254019250508190555050565b600081600001549050919050565b6128a1828260405180602001604052806000815250612e5a565b5050565b60006128c68473ffffffffffffffffffffffffffffffffffffffff16612ecb565b6128d35760019050612ae2565b6060612a6963150b7a0260e01b6128e8611d49565b888787604051602401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561299857808201518184015260208101905061297d565b50505050905090810190601f1680156129c55780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051806060016040528060328152602001613412603291398773ffffffffffffffffffffffffffffffffffffffff16612ede9092919063ffffffff16565b90506000818060200190516020811015612a8257600080fd5b8101908080519060200190929190505050905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614925050505b949350505050565b600080836001016000848152602001908152602001600020541415905092915050565b60008083600101600084815260200190815260200160002054905060008114612be95760006001820390506000600186600001805490500390506000866000018281548110612b5857fe5b9060005260206000200154905080876000018481548110612b7557fe5b9060005260206000200181905550600183018760010160008381526020019081526020016000208190555086600001805480612bad57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050612bef565b60009150505b92915050565b6000612c018383612ef6565b612c5a578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612c5f565b600090505b92915050565b6000808460010160008581526020019081526020016000205490506000811415612d0c57846000016040518060400160405280868152602001858152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550508460000180549050856001016000868152602001908152602001600020819055506001915050612d3a565b82856000016001830381548110612d1f57fe5b90600052602060002090600202016001018190555060009150505b9392505050565b60008083600101600084815260200190815260200160002054905060008114612e4e5760006001820390506000600186600001805490500390506000866000018281548110612d8c57fe5b9060005260206000209060020201905080876000018481548110612dac57fe5b9060005260206000209060020201600082015481600001556001820154816001015590505060018301876001016000836000015481526020019081526020016000208190555086600001805480612dff57fe5b6001900381819060005260206000209060020201600080820160009055600182016000905550509055866001016000878152602001908152602001600020600090556001945050505050612e54565b60009150505b92915050565b612e648383612f19565b612e7160008484846128a5565b612ec6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001806134126032913960400191505060405180910390fd5b505050565b600080823b905060008111915050919050565b6060612eed848460008561310d565b90509392505050565b600080836001016000848152602001908152602001600020541415905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612fbc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4552433732313a206d696e7420746f20746865207a65726f206164647265737381525060200191505060405180910390fd5b612fc581611d2c565b15613038576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000081525060200191505060405180910390fd5b613044600083836125b8565b61309581600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206125d790919063ffffffff16565b506130ac818360026125f19092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b606082471015613168576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806134bd6026913960400191505060405180910390fd5b61317185612ecb565b6131e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106132335780518252602082019150602081019050602083039250613210565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613295576040519150601f19603f3d011682016040523d82523d6000602084013e61329a565b606091505b50915091506132aa8282866132b6565b92505050949350505050565b606083156132c65782905061337b565b6000835111156132d95782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613340578082015181840152602081019050613325565b50505050905090810190601f16801561336d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b50805460018160011615610100020316600290046000825580601f106133a857506133c7565b601f0160209004906000526020600020908101906133c691906133ca565b5b50565b6133ec91905b808211156133e85760008160009055506001016133d0565b5090565b9056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724f6e6c7920746865206f776e65722063616e20766f69642074686520636f6e74726163744120746f6b656e2068617320616c7265616479206265656e206d696e74656420666f72207468697320636f6e74726163744552433732313a207472616e7366657220746f20746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564596f752063616e6e6f74206275792074686520746f6b656e2066726f6d20796f757273656c664552433732314275726e61626c653a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a2646970667358221220fbf7865fb272886f49dc26345947b942ac992aefa5a478fc4bb37947161cfb3b64736f6c6343000608003368747470733a2f2f6578616d706c652e636f6d2f6d657461646174612e6a736f6e",
}

// DeliveryTokenABI is the input ABI used to generate the binding from.
// Deprecated: Use DeliveryTokenMetaData.ABI instead.
var DeliveryTokenABI = DeliveryTokenMetaData.ABI

// DeliveryTokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DeliveryTokenMetaData.Bin instead.
var DeliveryTokenBin = DeliveryTokenMetaData.Bin

// DeployDeliveryToken deploys a new Ethereum contract, binding an instance of DeliveryToken to it.
func DeployDeliveryToken(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DeliveryToken, error) {
	parsed, err := DeliveryTokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DeliveryTokenBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DeliveryToken{DeliveryTokenCaller: DeliveryTokenCaller{contract: contract}, DeliveryTokenTransactor: DeliveryTokenTransactor{contract: contract}, DeliveryTokenFilterer: DeliveryTokenFilterer{contract: contract}}, nil
}

// DeliveryToken is an auto generated Go binding around an Ethereum contract.
type DeliveryToken struct {
	DeliveryTokenCaller     // Read-only binding to the contract
	DeliveryTokenTransactor // Write-only binding to the contract
	DeliveryTokenFilterer   // Log filterer for contract events
}

// DeliveryTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type DeliveryTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DeliveryTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DeliveryTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DeliveryTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DeliveryTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DeliveryTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DeliveryTokenSession struct {
	Contract     *DeliveryToken    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DeliveryTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DeliveryTokenCallerSession struct {
	Contract *DeliveryTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// DeliveryTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DeliveryTokenTransactorSession struct {
	Contract     *DeliveryTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// DeliveryTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type DeliveryTokenRaw struct {
	Contract *DeliveryToken // Generic contract binding to access the raw methods on
}

// DeliveryTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DeliveryTokenCallerRaw struct {
	Contract *DeliveryTokenCaller // Generic read-only contract binding to access the raw methods on
}

// DeliveryTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DeliveryTokenTransactorRaw struct {
	Contract *DeliveryTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDeliveryToken creates a new instance of DeliveryToken, bound to a specific deployed contract.
func NewDeliveryToken(address common.Address, backend bind.ContractBackend) (*DeliveryToken, error) {
	contract, err := bindDeliveryToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DeliveryToken{DeliveryTokenCaller: DeliveryTokenCaller{contract: contract}, DeliveryTokenTransactor: DeliveryTokenTransactor{contract: contract}, DeliveryTokenFilterer: DeliveryTokenFilterer{contract: contract}}, nil
}

// NewDeliveryTokenCaller creates a new read-only instance of DeliveryToken, bound to a specific deployed contract.
func NewDeliveryTokenCaller(address common.Address, caller bind.ContractCaller) (*DeliveryTokenCaller, error) {
	contract, err := bindDeliveryToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DeliveryTokenCaller{contract: contract}, nil
}

// NewDeliveryTokenTransactor creates a new write-only instance of DeliveryToken, bound to a specific deployed contract.
func NewDeliveryTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*DeliveryTokenTransactor, error) {
	contract, err := bindDeliveryToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DeliveryTokenTransactor{contract: contract}, nil
}

// NewDeliveryTokenFilterer creates a new log filterer instance of DeliveryToken, bound to a specific deployed contract.
func NewDeliveryTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*DeliveryTokenFilterer, error) {
	contract, err := bindDeliveryToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DeliveryTokenFilterer{contract: contract}, nil
}

// bindDeliveryToken binds a generic wrapper to an already deployed contract.
func bindDeliveryToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DeliveryTokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DeliveryToken *DeliveryTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DeliveryToken.Contract.DeliveryTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DeliveryToken *DeliveryTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DeliveryToken.Contract.DeliveryTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DeliveryToken *DeliveryTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DeliveryToken.Contract.DeliveryTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DeliveryToken *DeliveryTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DeliveryToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DeliveryToken *DeliveryTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DeliveryToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DeliveryToken *DeliveryTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DeliveryToken.Contract.contract.Transact(opts, method, params...)
}

// URI is a free data retrieval call binding the contract method 0x1141d7de.
//
// Solidity: function URI() view returns(string)
func (_DeliveryToken *DeliveryTokenCaller) URI(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DeliveryToken.contract.Call(opts, &out, "URI")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// URI is a free data retrieval call binding the contract method 0x1141d7de.
//
// Solidity: function URI() view returns(string)
func (_DeliveryToken *DeliveryTokenSession) URI() (string, error) {
	return _DeliveryToken.Contract.URI(&_DeliveryToken.CallOpts)
}

// URI is a free data retrieval call binding the contract method 0x1141d7de.
//
// Solidity: function URI() view returns(string)
func (_DeliveryToken *DeliveryTokenCallerSession) URI() (string, error) {
	return _DeliveryToken.Contract.URI(&_DeliveryToken.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_DeliveryToken *DeliveryTokenCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DeliveryToken.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_DeliveryToken *DeliveryTokenSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _DeliveryToken.Contract.BalanceOf(&_DeliveryToken.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_DeliveryToken *DeliveryTokenCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _DeliveryToken.Contract.BalanceOf(&_DeliveryToken.CallOpts, owner)
}

// BaseURI is a free data retrieval call binding the contract method 0x6c0360eb.
//
// Solidity: function baseURI() view returns(string)
func (_DeliveryToken *DeliveryTokenCaller) BaseURI(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DeliveryToken.contract.Call(opts, &out, "baseURI")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// BaseURI is a free data retrieval call binding the contract method 0x6c0360eb.
//
// Solidity: function baseURI() view returns(string)
func (_DeliveryToken *DeliveryTokenSession) BaseURI() (string, error) {
	return _DeliveryToken.Contract.BaseURI(&_DeliveryToken.CallOpts)
}

// BaseURI is a free data retrieval call binding the contract method 0x6c0360eb.
//
// Solidity: function baseURI() view returns(string)
func (_DeliveryToken *DeliveryTokenCallerSession) BaseURI() (string, error) {
	return _DeliveryToken.Contract.BaseURI(&_DeliveryToken.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_DeliveryToken *DeliveryTokenCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _DeliveryToken.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_DeliveryToken *DeliveryTokenSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _DeliveryToken.Contract.GetApproved(&_DeliveryToken.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_DeliveryToken *DeliveryTokenCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _DeliveryToken.Contract.GetApproved(&_DeliveryToken.CallOpts, tokenId)
}

// GetId is a free data retrieval call binding the contract method 0x5d1ca631.
//
// Solidity: function getId() view returns(uint256)
func (_DeliveryToken *DeliveryTokenCaller) GetId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DeliveryToken.contract.Call(opts, &out, "getId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetId is a free data retrieval call binding the contract method 0x5d1ca631.
//
// Solidity: function getId() view returns(uint256)
func (_DeliveryToken *DeliveryTokenSession) GetId() (*big.Int, error) {
	return _DeliveryToken.Contract.GetId(&_DeliveryToken.CallOpts)
}

// GetId is a free data retrieval call binding the contract method 0x5d1ca631.
//
// Solidity: function getId() view returns(uint256)
func (_DeliveryToken *DeliveryTokenCallerSession) GetId() (*big.Int, error) {
	return _DeliveryToken.Contract.GetId(&_DeliveryToken.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_DeliveryToken *DeliveryTokenCaller) GetOwner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DeliveryToken.contract.Call(opts, &out, "getOwner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_DeliveryToken *DeliveryTokenSession) GetOwner() (common.Address, error) {
	return _DeliveryToken.Contract.GetOwner(&_DeliveryToken.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_DeliveryToken *DeliveryTokenCallerSession) GetOwner() (common.Address, error) {
	return _DeliveryToken.Contract.GetOwner(&_DeliveryToken.CallOpts)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_DeliveryToken *DeliveryTokenCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _DeliveryToken.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_DeliveryToken *DeliveryTokenSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _DeliveryToken.Contract.IsApprovedForAll(&_DeliveryToken.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_DeliveryToken *DeliveryTokenCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _DeliveryToken.Contract.IsApprovedForAll(&_DeliveryToken.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DeliveryToken *DeliveryTokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DeliveryToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DeliveryToken *DeliveryTokenSession) Name() (string, error) {
	return _DeliveryToken.Contract.Name(&_DeliveryToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_DeliveryToken *DeliveryTokenCallerSession) Name() (string, error) {
	return _DeliveryToken.Contract.Name(&_DeliveryToken.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_DeliveryToken *DeliveryTokenCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _DeliveryToken.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_DeliveryToken *DeliveryTokenSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _DeliveryToken.Contract.OwnerOf(&_DeliveryToken.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_DeliveryToken *DeliveryTokenCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _DeliveryToken.Contract.OwnerOf(&_DeliveryToken.CallOpts, tokenId)
}

// PurchasePrice is a free data retrieval call binding the contract method 0xdefd6c5f.
//
// Solidity: function purchasePrice() view returns(uint256)
func (_DeliveryToken *DeliveryTokenCaller) PurchasePrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DeliveryToken.contract.Call(opts, &out, "purchasePrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PurchasePrice is a free data retrieval call binding the contract method 0xdefd6c5f.
//
// Solidity: function purchasePrice() view returns(uint256)
func (_DeliveryToken *DeliveryTokenSession) PurchasePrice() (*big.Int, error) {
	return _DeliveryToken.Contract.PurchasePrice(&_DeliveryToken.CallOpts)
}

// PurchasePrice is a free data retrieval call binding the contract method 0xdefd6c5f.
//
// Solidity: function purchasePrice() view returns(uint256)
func (_DeliveryToken *DeliveryTokenCallerSession) PurchasePrice() (*big.Int, error) {
	return _DeliveryToken.Contract.PurchasePrice(&_DeliveryToken.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DeliveryToken *DeliveryTokenCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _DeliveryToken.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DeliveryToken *DeliveryTokenSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DeliveryToken.Contract.SupportsInterface(&_DeliveryToken.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DeliveryToken *DeliveryTokenCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DeliveryToken.Contract.SupportsInterface(&_DeliveryToken.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DeliveryToken *DeliveryTokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _DeliveryToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DeliveryToken *DeliveryTokenSession) Symbol() (string, error) {
	return _DeliveryToken.Contract.Symbol(&_DeliveryToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_DeliveryToken *DeliveryTokenCallerSession) Symbol() (string, error) {
	return _DeliveryToken.Contract.Symbol(&_DeliveryToken.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_DeliveryToken *DeliveryTokenCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DeliveryToken.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_DeliveryToken *DeliveryTokenSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _DeliveryToken.Contract.TokenByIndex(&_DeliveryToken.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_DeliveryToken *DeliveryTokenCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _DeliveryToken.Contract.TokenByIndex(&_DeliveryToken.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_DeliveryToken *DeliveryTokenCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _DeliveryToken.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_DeliveryToken *DeliveryTokenSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _DeliveryToken.Contract.TokenOfOwnerByIndex(&_DeliveryToken.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_DeliveryToken *DeliveryTokenCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _DeliveryToken.Contract.TokenOfOwnerByIndex(&_DeliveryToken.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_DeliveryToken *DeliveryTokenCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _DeliveryToken.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_DeliveryToken *DeliveryTokenSession) TokenURI(tokenId *big.Int) (string, error) {
	return _DeliveryToken.Contract.TokenURI(&_DeliveryToken.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_DeliveryToken *DeliveryTokenCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _DeliveryToken.Contract.TokenURI(&_DeliveryToken.CallOpts, tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DeliveryToken *DeliveryTokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DeliveryToken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DeliveryToken *DeliveryTokenSession) TotalSupply() (*big.Int, error) {
	return _DeliveryToken.Contract.TotalSupply(&_DeliveryToken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_DeliveryToken *DeliveryTokenCallerSession) TotalSupply() (*big.Int, error) {
	return _DeliveryToken.Contract.TotalSupply(&_DeliveryToken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_DeliveryToken *DeliveryTokenTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryToken.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_DeliveryToken *DeliveryTokenSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryToken.Contract.Approve(&_DeliveryToken.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_DeliveryToken *DeliveryTokenTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryToken.Contract.Approve(&_DeliveryToken.TransactOpts, to, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_DeliveryToken *DeliveryTokenTransactor) Burn(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryToken.contract.Transact(opts, "burn", tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_DeliveryToken *DeliveryTokenSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryToken.Contract.Burn(&_DeliveryToken.TransactOpts, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_DeliveryToken *DeliveryTokenTransactorSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryToken.Contract.Burn(&_DeliveryToken.TransactOpts, tokenId)
}

// BurnToken is a paid mutator transaction binding the contract method 0xfaa0a264.
//
// Solidity: function burnToken() returns()
func (_DeliveryToken *DeliveryTokenTransactor) BurnToken(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DeliveryToken.contract.Transact(opts, "burnToken")
}

// BurnToken is a paid mutator transaction binding the contract method 0xfaa0a264.
//
// Solidity: function burnToken() returns()
func (_DeliveryToken *DeliveryTokenSession) BurnToken() (*types.Transaction, error) {
	return _DeliveryToken.Contract.BurnToken(&_DeliveryToken.TransactOpts)
}

// BurnToken is a paid mutator transaction binding the contract method 0xfaa0a264.
//
// Solidity: function burnToken() returns()
func (_DeliveryToken *DeliveryTokenTransactorSession) BurnToken() (*types.Transaction, error) {
	return _DeliveryToken.Contract.BurnToken(&_DeliveryToken.TransactOpts)
}

// Buy is a paid mutator transaction binding the contract method 0xa6f2ae3a.
//
// Solidity: function buy() payable returns()
func (_DeliveryToken *DeliveryTokenTransactor) Buy(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DeliveryToken.contract.Transact(opts, "buy")
}

// Buy is a paid mutator transaction binding the contract method 0xa6f2ae3a.
//
// Solidity: function buy() payable returns()
func (_DeliveryToken *DeliveryTokenSession) Buy() (*types.Transaction, error) {
	return _DeliveryToken.Contract.Buy(&_DeliveryToken.TransactOpts)
}

// Buy is a paid mutator transaction binding the contract method 0xa6f2ae3a.
//
// Solidity: function buy() payable returns()
func (_DeliveryToken *DeliveryTokenTransactorSession) Buy() (*types.Transaction, error) {
	return _DeliveryToken.Contract.Buy(&_DeliveryToken.TransactOpts)
}

// MintToken is a paid mutator transaction binding the contract method 0xa140ae23.
//
// Solidity: function mintToken(uint256 monetaryValue, address _allowedPurchaser) payable returns()
func (_DeliveryToken *DeliveryTokenTransactor) MintToken(opts *bind.TransactOpts, monetaryValue *big.Int, _allowedPurchaser common.Address) (*types.Transaction, error) {
	return _DeliveryToken.contract.Transact(opts, "mintToken", monetaryValue, _allowedPurchaser)
}

// MintToken is a paid mutator transaction binding the contract method 0xa140ae23.
//
// Solidity: function mintToken(uint256 monetaryValue, address _allowedPurchaser) payable returns()
func (_DeliveryToken *DeliveryTokenSession) MintToken(monetaryValue *big.Int, _allowedPurchaser common.Address) (*types.Transaction, error) {
	return _DeliveryToken.Contract.MintToken(&_DeliveryToken.TransactOpts, monetaryValue, _allowedPurchaser)
}

// MintToken is a paid mutator transaction binding the contract method 0xa140ae23.
//
// Solidity: function mintToken(uint256 monetaryValue, address _allowedPurchaser) payable returns()
func (_DeliveryToken *DeliveryTokenTransactorSession) MintToken(monetaryValue *big.Int, _allowedPurchaser common.Address) (*types.Transaction, error) {
	return _DeliveryToken.Contract.MintToken(&_DeliveryToken.TransactOpts, monetaryValue, _allowedPurchaser)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_DeliveryToken *DeliveryTokenTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryToken.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_DeliveryToken *DeliveryTokenSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryToken.Contract.SafeTransferFrom(&_DeliveryToken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_DeliveryToken *DeliveryTokenTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryToken.Contract.SafeTransferFrom(&_DeliveryToken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_DeliveryToken *DeliveryTokenTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _DeliveryToken.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_DeliveryToken *DeliveryTokenSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _DeliveryToken.Contract.SafeTransferFrom0(&_DeliveryToken.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_DeliveryToken *DeliveryTokenTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _DeliveryToken.Contract.SafeTransferFrom0(&_DeliveryToken.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_DeliveryToken *DeliveryTokenTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _DeliveryToken.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_DeliveryToken *DeliveryTokenSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _DeliveryToken.Contract.SetApprovalForAll(&_DeliveryToken.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_DeliveryToken *DeliveryTokenTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _DeliveryToken.Contract.SetApprovalForAll(&_DeliveryToken.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_DeliveryToken *DeliveryTokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryToken.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_DeliveryToken *DeliveryTokenSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryToken.Contract.TransferFrom(&_DeliveryToken.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_DeliveryToken *DeliveryTokenTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _DeliveryToken.Contract.TransferFrom(&_DeliveryToken.TransactOpts, from, to, tokenId)
}

// DeliveryTokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the DeliveryToken contract.
type DeliveryTokenApprovalIterator struct {
	Event *DeliveryTokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DeliveryTokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DeliveryTokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DeliveryTokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DeliveryTokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DeliveryTokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DeliveryTokenApproval represents a Approval event raised by the DeliveryToken contract.
type DeliveryTokenApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_DeliveryToken *DeliveryTokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*DeliveryTokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _DeliveryToken.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &DeliveryTokenApprovalIterator{contract: _DeliveryToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_DeliveryToken *DeliveryTokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *DeliveryTokenApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _DeliveryToken.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DeliveryTokenApproval)
				if err := _DeliveryToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_DeliveryToken *DeliveryTokenFilterer) ParseApproval(log types.Log) (*DeliveryTokenApproval, error) {
	event := new(DeliveryTokenApproval)
	if err := _DeliveryToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DeliveryTokenApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the DeliveryToken contract.
type DeliveryTokenApprovalForAllIterator struct {
	Event *DeliveryTokenApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DeliveryTokenApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DeliveryTokenApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DeliveryTokenApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DeliveryTokenApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DeliveryTokenApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DeliveryTokenApprovalForAll represents a ApprovalForAll event raised by the DeliveryToken contract.
type DeliveryTokenApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_DeliveryToken *DeliveryTokenFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*DeliveryTokenApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _DeliveryToken.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &DeliveryTokenApprovalForAllIterator{contract: _DeliveryToken.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_DeliveryToken *DeliveryTokenFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *DeliveryTokenApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _DeliveryToken.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DeliveryTokenApprovalForAll)
				if err := _DeliveryToken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_DeliveryToken *DeliveryTokenFilterer) ParseApprovalForAll(log types.Log) (*DeliveryTokenApprovalForAll, error) {
	event := new(DeliveryTokenApprovalForAll)
	if err := _DeliveryToken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DeliveryTokenNFTMintedIterator is returned from FilterNFTMinted and is used to iterate over the raw logs and unpacked data for NFTMinted events raised by the DeliveryToken contract.
type DeliveryTokenNFTMintedIterator struct {
	Event *DeliveryTokenNFTMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DeliveryTokenNFTMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DeliveryTokenNFTMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DeliveryTokenNFTMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DeliveryTokenNFTMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DeliveryTokenNFTMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DeliveryTokenNFTMinted represents a NFTMinted event raised by the DeliveryToken contract.
type DeliveryTokenNFTMinted struct {
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNFTMinted is a free log retrieval operation binding the contract event 0xd9dc24857f317ed9abbbb42e920ede0104231eb1d3d70236a74887ffaf159868.
//
// Solidity: event NFTMinted(uint256 _tokenId)
func (_DeliveryToken *DeliveryTokenFilterer) FilterNFTMinted(opts *bind.FilterOpts) (*DeliveryTokenNFTMintedIterator, error) {

	logs, sub, err := _DeliveryToken.contract.FilterLogs(opts, "NFTMinted")
	if err != nil {
		return nil, err
	}
	return &DeliveryTokenNFTMintedIterator{contract: _DeliveryToken.contract, event: "NFTMinted", logs: logs, sub: sub}, nil
}

// WatchNFTMinted is a free log subscription operation binding the contract event 0xd9dc24857f317ed9abbbb42e920ede0104231eb1d3d70236a74887ffaf159868.
//
// Solidity: event NFTMinted(uint256 _tokenId)
func (_DeliveryToken *DeliveryTokenFilterer) WatchNFTMinted(opts *bind.WatchOpts, sink chan<- *DeliveryTokenNFTMinted) (event.Subscription, error) {

	logs, sub, err := _DeliveryToken.contract.WatchLogs(opts, "NFTMinted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DeliveryTokenNFTMinted)
				if err := _DeliveryToken.contract.UnpackLog(event, "NFTMinted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNFTMinted is a log parse operation binding the contract event 0xd9dc24857f317ed9abbbb42e920ede0104231eb1d3d70236a74887ffaf159868.
//
// Solidity: event NFTMinted(uint256 _tokenId)
func (_DeliveryToken *DeliveryTokenFilterer) ParseNFTMinted(log types.Log) (*DeliveryTokenNFTMinted, error) {
	event := new(DeliveryTokenNFTMinted)
	if err := _DeliveryToken.contract.UnpackLog(event, "NFTMinted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DeliveryTokenNftBoughtIterator is returned from FilterNftBought and is used to iterate over the raw logs and unpacked data for NftBought events raised by the DeliveryToken contract.
type DeliveryTokenNftBoughtIterator struct {
	Event *DeliveryTokenNftBought // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DeliveryTokenNftBoughtIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DeliveryTokenNftBought)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DeliveryTokenNftBought)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DeliveryTokenNftBoughtIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DeliveryTokenNftBoughtIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DeliveryTokenNftBought represents a NftBought event raised by the DeliveryToken contract.
type DeliveryTokenNftBought struct {
	Seller common.Address
	Buyer  common.Address
	Price  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterNftBought is a free log retrieval operation binding the contract event 0x608f6ac9327c2bf4d3c77adf447d2c448ba7b0971e0aaa9aa03f7ac29d874a44.
//
// Solidity: event NftBought(address _seller, address _buyer, uint256 _price)
func (_DeliveryToken *DeliveryTokenFilterer) FilterNftBought(opts *bind.FilterOpts) (*DeliveryTokenNftBoughtIterator, error) {

	logs, sub, err := _DeliveryToken.contract.FilterLogs(opts, "NftBought")
	if err != nil {
		return nil, err
	}
	return &DeliveryTokenNftBoughtIterator{contract: _DeliveryToken.contract, event: "NftBought", logs: logs, sub: sub}, nil
}

// WatchNftBought is a free log subscription operation binding the contract event 0x608f6ac9327c2bf4d3c77adf447d2c448ba7b0971e0aaa9aa03f7ac29d874a44.
//
// Solidity: event NftBought(address _seller, address _buyer, uint256 _price)
func (_DeliveryToken *DeliveryTokenFilterer) WatchNftBought(opts *bind.WatchOpts, sink chan<- *DeliveryTokenNftBought) (event.Subscription, error) {

	logs, sub, err := _DeliveryToken.contract.WatchLogs(opts, "NftBought")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DeliveryTokenNftBought)
				if err := _DeliveryToken.contract.UnpackLog(event, "NftBought", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNftBought is a log parse operation binding the contract event 0x608f6ac9327c2bf4d3c77adf447d2c448ba7b0971e0aaa9aa03f7ac29d874a44.
//
// Solidity: event NftBought(address _seller, address _buyer, uint256 _price)
func (_DeliveryToken *DeliveryTokenFilterer) ParseNftBought(log types.Log) (*DeliveryTokenNftBought, error) {
	event := new(DeliveryTokenNftBought)
	if err := _DeliveryToken.contract.UnpackLog(event, "NftBought", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DeliveryTokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the DeliveryToken contract.
type DeliveryTokenTransferIterator struct {
	Event *DeliveryTokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DeliveryTokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DeliveryTokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DeliveryTokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DeliveryTokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DeliveryTokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DeliveryTokenTransfer represents a Transfer event raised by the DeliveryToken contract.
type DeliveryTokenTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_DeliveryToken *DeliveryTokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*DeliveryTokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _DeliveryToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &DeliveryTokenTransferIterator{contract: _DeliveryToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_DeliveryToken *DeliveryTokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *DeliveryTokenTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _DeliveryToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DeliveryTokenTransfer)
				if err := _DeliveryToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_DeliveryToken *DeliveryTokenFilterer) ParseTransfer(log types.Log) (*DeliveryTokenTransfer, error) {
	event := new(DeliveryTokenTransfer)
	if err := _DeliveryToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
